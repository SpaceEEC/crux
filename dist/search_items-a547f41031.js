searchNodes=[{"ref":"Crux.Base.html","title":"Crux.Base","type":"module","doc":"TODO: Write me"},{"ref":"Crux.Base.html#child_spec/1","title":"Crux.Base.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Base.html#producers/1","title":"Crux.Base.producers/1","type":"function","doc":"Computes a map of all producers keyed by shard_id."},{"ref":"Crux.Base.html#start_link/1","title":"Crux.Base.start_link/1","type":"function","doc":""},{"ref":"Crux.Base.html#t:options/0","title":"Crux.Base.options/0","type":"type","doc":""},{"ref":"Crux.Base.Consumer.html","title":"Crux.Base.Consumer","type":"module","doc":"Handles consuming and processing of events received from the gateway. To consume those processed events subscribe with a consumer to a producer. You can fetch said producers via Crux.Base.producers/1"},{"ref":"Crux.Base.ConsumerSupervisor.html","title":"Crux.Base.ConsumerSupervisor","type":"module","doc":"Supervises a consumer, for example, a module using Crux.Base.TaskConsumer. A somewhat example of this: defmodule Bot.Supervisor do def start_link(_), do: Supervisor.start_link(__MODULE__, %{}, name: __MODULE__) def init(_args) do children = [ # other childrens... [{Crux.Base.ConsumerSupervisor, {Bot.Consumer, Bot.CruxBase}] ] Supervisor.init(children, strategy: :one_for_one) end end"},{"ref":"Crux.Base.Processor.html","title":"Crux.Base.Processor","type":"module","doc":"Module processing gateway packets into event/0s making necessary cache lookups / insertions."},{"ref":"Crux.Base.Processor.html#process_event/4","title":"Crux.Base.Processor.process_event/4","type":"function","doc":"Processes the type (t value of a packet) along its data (d portion of a packet). This will do necessary transformation, cache lookups, and cache insertions. Returns an event/0 or a list of them."},{"ref":"Crux.Base.Processor.html#t:channel_create_event/0","title":"Crux.Base.Processor.channel_create_event/0","type":"type","doc":"Emitted whenever a channel was created. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:channel_delete_event/0","title":"Crux.Base.Processor.channel_delete_event/0","type":"type","doc":"Emitted whenever a channel was deleted. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:channel_id/0","title":"Crux.Base.Processor.channel_id/0","type":"type","doc":"The id of a channel."},{"ref":"Crux.Base.Processor.html#t:channel_pins_update_event/0","title":"Crux.Base.Processor.channel_pins_update_event/0","type":"type","doc":"Emitted whenever a message was pinned or unpinned. Emits the channel id if the channel was uncached. &gt; The second element of the tuple is the timestamp of when the last pinned message was pinned. &gt; The timestamp will be the Unix Epoch if last pinned message was removed. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:channel_update_event/0","title":"Crux.Base.Processor.channel_update_event/0","type":"type","doc":"Emitted whenever a channel was updated. Emits nil if the channel was uncached previously. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:event/0","title":"Crux.Base.Processor.event/0","type":"type","doc":"Union type of all available events."},{"ref":"Crux.Base.Processor.html#t:guild_ban_add_event/0","title":"Crux.Base.Processor.guild_ban_add_event/0","type":"type","doc":"Emitted whenever a user was banned from a guild. Emits a user if the member was not cached. Emits the guild id if the guild was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_ban_remove_event/0","title":"Crux.Base.Processor.guild_ban_remove_event/0","type":"type","doc":"Emitted whenever a user was unbanned from a guild. Emits the guild id if the guild was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_create_event/0","title":"Crux.Base.Processor.guild_create_event/0","type":"type","doc":"Emitted whenever the client joined a guild. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_delete_event/0","title":"Crux.Base.Processor.guild_delete_event/0","type":"type","doc":"Emitted whenever the client left a guild or a guild became unavailable. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_emojis_update_event/0","title":"Crux.Base.Processor.guild_emojis_update_event/0","type":"type","doc":"Emitted whenever a guild&#39;s emojis updated. The first element is a list of the emojis before the update. The second element is al ist of the emojis after the update. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_id/0","title":"Crux.Base.Processor.guild_id/0","type":"type","doc":"The id of a guild."},{"ref":"Crux.Base.Processor.html#t:guild_integrations_update_event/0","title":"Crux.Base.Processor.guild_integrations_update_event/0","type":"type","doc":"Emitted whenever one of a guild&#39;s integration was updated. Emits the guild id if the guild was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_member_add_event/0","title":"Crux.Base.Processor.guild_member_add_event/0","type":"type","doc":"Emitted whenever a user joined a guild. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_member_remove_event/0","title":"Crux.Base.Processor.guild_member_remove_event/0","type":"type","doc":"Emitted whenever a user left a guild. This includes kicks and bans. Emits the user if the member was not cached. Emits the guild id if the guild was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_member_update_event/0","title":"Crux.Base.Processor.guild_member_update_event/0","type":"type","doc":"Emitted whenever a guild member was updated. Emits nil as the member before the updated if it was uncached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_members_chunk_event/0","title":"Crux.Base.Processor.guild_members_chunk_event/0","type":"type","doc":"Emitted whenever a chunk of guild members was received. For more information see Crux.Gateway.Command.request_guild_members/2 and Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_role_create_event/0","title":"Crux.Base.Processor.guild_role_create_event/0","type":"type","doc":"Emitted whenever a role was created. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_role_delete_event/0","title":"Crux.Base.Processor.guild_role_delete_event/0","type":"type","doc":"Emitted whenever a role was deleted. Emits a tuple of role and guild or guild id if uncached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_role_update_event/0","title":"Crux.Base.Processor.guild_role_update_event/0","type":"type","doc":"Emitted whenever a role was updated. Emits nil as the role before the update if it was uncached previously. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:guild_update_event/0","title":"Crux.Base.Processor.guild_update_event/0","type":"type","doc":"Emitted whenever a guild updated. Emits nil as guild before the update if it was uncached previously. Fore more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_create_event/0","title":"Crux.Base.Processor.message_create_event/0","type":"type","doc":"Emitted whenever a message was created. (Sent to a channel) For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_delete_bulk_event/0","title":"Crux.Base.Processor.message_delete_bulk_event/0","type":"type","doc":"Emitted whenever a bulk of messages was deleted. Emits a tuple of channel and guild id if the channel was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_delete_event/0","title":"Crux.Base.Processor.message_delete_event/0","type":"type","doc":"Emitted whenever a channel was deleted. Emits a tuple of channel and guild id if the channel was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_id/0","title":"Crux.Base.Processor.message_id/0","type":"type","doc":"The id of a message."},{"ref":"Crux.Base.Processor.html#t:message_reaction_add_event/0","title":"Crux.Base.Processor.message_reaction_add_event/0","type":"type","doc":"Emitted whenever a reaction was added to a message. Emits the user id if the user was not cached. Emits a tuple of channel and guild id if the channel was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_reaction_remove_all_event/0","title":"Crux.Base.Processor.message_reaction_remove_all_event/0","type":"type","doc":"Emitted whenever a user explicitly removed all reactions from a message. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_reaction_remove_event/0","title":"Crux.Base.Processor.message_reaction_remove_event/0","type":"type","doc":"Emitted whenever a reaction was removed from a message. Emits the user id if the user was not cached. Emits a tuple of channel and guild id if the channel was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:message_update_event/0","title":"Crux.Base.Processor.message_update_event/0","type":"type","doc":"Emitted whenever a message was updated. Emits a partial object for &quot;embed update&quot;s (discord auto embedding websites/images/videos) Or the full new message for &quot;actual&quot; message updates. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:presence_update_event/0","title":"Crux.Base.Processor.presence_update_event/0","type":"type","doc":"Emitted whenever a user&#39;s presence or any of the user&#39;s properties updated. Emits presences for presence updates. Emits users for user updates. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:ready_event/0","title":"Crux.Base.Processor.ready_event/0","type":"type","doc":"Emitted when a gateway connection completed the initial handshake with the gateway. The guilds are not yet sent, those are partial unavailable guilds! For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:resumed_event/0","title":"Crux.Base.Processor.resumed_event/0","type":"type","doc":"Emitted whenever a gateway connection resumed after unexpectedly disconnecting. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:role_id/0","title":"Crux.Base.Processor.role_id/0","type":"type","doc":"The id of a role."},{"ref":"Crux.Base.Processor.html#t:shard_id/0","title":"Crux.Base.Processor.shard_id/0","type":"type","doc":"The id of a shard."},{"ref":"Crux.Base.Processor.html#t:snowflake/0","title":"Crux.Base.Processor.snowflake/0","type":"type","doc":"A discord snowflake. See t:Crux.Rest.Snowflake/0 for more information."},{"ref":"Crux.Base.Processor.html#t:typing_start_event/0","title":"Crux.Base.Processor.typing_start_event/0","type":"type","doc":"Emitted whenever a user started typing in a channel. Emits a tuple of channel and guild id if the channel was not cached. Emits the user id if the user was not cached. The third element is the unix timestamp of when the user started typing. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:user_id/0","title":"Crux.Base.Processor.user_id/0","type":"type","doc":"The id of a user."},{"ref":"Crux.Base.Processor.html#t:user_update_event/0","title":"Crux.Base.Processor.user_update_event/0","type":"type","doc":"Emitted whenever properties about the current user changed. Emits nil as the user before the update if uncached previously. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:voice_server_update_event/0","title":"Crux.Base.Processor.voice_server_update_event/0","type":"type","doc":"Emitted whenever guild&#39;s voice server was updated. &gt; This is the raw, but atomified, payload from discord, you can directly forward it to, for example, Lavalink. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:voice_state_update_event/0","title":"Crux.Base.Processor.voice_state_update_event/0","type":"type","doc":"Emitted whenever the voice state of a member changed. Emits nil as the voice state before the update if uncached previously. For more information see Discord Docs."},{"ref":"Crux.Base.Processor.html#t:webhooks_update_event/0","title":"Crux.Base.Processor.webhooks_update_event/0","type":"type","doc":"Emitted whenever a channel&#39;s webhook was created, updated, or deleted. Emits the guild id if the guild was not cached. Emits the channel id if the channel was not cached. For more information see Discord Docs."},{"ref":"Crux.Base.TaskConsumer.html","title":"Crux.Base.TaskConsumer","type":"behaviour","doc":"Provides a __using__ macro to inject two functions to simplify consuming of gateway events. A somewhat example of this: A Supervisor, like Crux.Base.ConsumerSupervisor, and defmodule Bot.Consumer do use Crux.Base.TaskConsumer def handle_event({:MESSAGE_CREATE, message, _shard_id}) do IO.inspect(message) end def handle_event(_event), do: nil end"},{"ref":"Crux.Base.TaskConsumer.html#c:handle_event/1","title":"Crux.Base.TaskConsumer.handle_event/1","type":"callback","doc":"Will handle events. Be sure to have one &quot;catch all&quot; clause to not crash your consumer when you receive an event you didn&#39;t handle."},{"ref":"Crux.Base.TaskConsumer.html#t:event/0","title":"Crux.Base.TaskConsumer.event/0","type":"type","doc":"All available element types."},{"ref":"Crux.Cache.html","title":"Crux.Cache","type":"behaviour","doc":"Behaviour all caches must implement. (Looking at custom ones you may want to write) There are exceptions: User cache: Implement a me/1 function setting the own user id A me/0 and me!/0 function getting the own user Guild cache: A bit more, you probably want to take a look at the code of the Crux.Cache.Guild module Custom caches should be put under a Crux.Cache.Provider. (Can be combined with default caches) Also worth a look: Crux.Cache.None - A dummy Crux.Cache and Crux.Cache.Provider, not caching anything."},{"ref":"Crux.Cache.html#c:delete/1","title":"Crux.Cache.delete/1","type":"callback","doc":"Deletes data from the cache by key."},{"ref":"Crux.Cache.html#c:fetch/1","title":"Crux.Cache.fetch/1","type":"callback","doc":"Fetches data from the cache by key."},{"ref":"Crux.Cache.html#c:fetch!/1","title":"Crux.Cache.fetch!/1","type":"callback","doc":"Fetches data from the cache by key, raises if not found."},{"ref":"Crux.Cache.html#c:insert/1","title":"Crux.Cache.insert/1","type":"callback","doc":"Inserts data into the cache. Returns the atomified data allowing the operation to be chained. For example something like that: id = raw_data |&gt; Cache.insert() |&gt; Map.get(:id)"},{"ref":"Crux.Cache.html#c:start_link/1","title":"Crux.Cache.start_link/1","type":"callback","doc":"Used to start anything fitting under a supervision tree, like for example a GenServer, instructed with handling the cache. Optional, you maybe want to use external caching, e.g. Redis, not requiring anything like that."},{"ref":"Crux.Cache.html#c:update/1","title":"Crux.Cache.update/1","type":"callback","doc":"Inserts data into the cache. Returns &quot;updated&quot; data including changes by merging.For example from a message embed update to a full message object content = partial_message # only contains `:id`, `:channel_id`, and `:embeds` |&gt; Cache.update() |&gt; Map.get(:content) # present if the message was cached previously"},{"ref":"Crux.Cache.html#t:key/0","title":"Crux.Cache.key/0","type":"type","doc":"Default caches are using Discord Snowflakes as identifiers."},{"ref":"Crux.Cache.Base.html","title":"Crux.Cache.Base","type":"module","doc":"Base cache utilising ETS tables, :ets"},{"ref":"Crux.Cache.Channel.html","title":"Crux.Cache.Channel","type":"module","doc":"Default Crux.Structs.Channel cache."},{"ref":"Crux.Cache.Channel.html#child_spec/1","title":"Crux.Cache.Channel.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Cache.Channel.html#delete/1","title":"Crux.Cache.Channel.delete/1","type":"function","doc":"Deletes data from the cache by key. Callback implementation for Crux.Cache.delete/1."},{"ref":"Crux.Cache.Channel.html#fetch/1","title":"Crux.Cache.Channel.fetch/1","type":"function","doc":"Fetches data from the cache by key. Callback implementation for Crux.Cache.fetch/1."},{"ref":"Crux.Cache.Channel.html#fetch!/1","title":"Crux.Cache.Channel.fetch!/1","type":"function","doc":"Fetches data from the cache by key, raises if not found. Callback implementation for Crux.Cache.fetch!/1."},{"ref":"Crux.Cache.Channel.html#insert/1","title":"Crux.Cache.Channel.insert/1","type":"function","doc":"Inserts data into the cache. Returns the atomified data allowing the operation to be chained. For example something like that: id = raw_data |&gt; Cache.insert() |&gt; Map.get(:id) Callback implementation for Crux.Cache.insert/1."},{"ref":"Crux.Cache.Channel.html#start_link/1","title":"Crux.Cache.Channel.start_link/1","type":"function","doc":"Used to start anything fitting under a supervision tree, like for example a GenServer, instructed with handling the cache. Optional, you maybe want to use external caching, e.g. Redis, not requiring anything like that. Callback implementation for Crux.Cache.start_link/1."},{"ref":"Crux.Cache.Channel.html#update/1","title":"Crux.Cache.Channel.update/1","type":"function","doc":"Inserts data into the cache. Returns &quot;updated&quot; data including changes by merging.For example from a message embed update to a full message object content = partial_message # only contains `:id`, `:channel_id`, and `:embeds` |&gt; Cache.update() |&gt; Map.get(:content) # present if the message was cached previously Callback implementation for Crux.Cache.update/1."},{"ref":"Crux.Cache.Default.html","title":"Crux.Cache.Default","type":"module","doc":"A provider using the default caches: Crux.Cache.Guild Crux.Cache.Channel Crux.Cache.Emoji Crux.Cache.Presence Crux.Cache.User"},{"ref":"Crux.Cache.Default.html#channel_cache/0","title":"Crux.Cache.Default.channel_cache/0","type":"function","doc":"The default guild cache: Crux.Cache.Channel."},{"ref":"Crux.Cache.Default.html#emoji_cache/0","title":"Crux.Cache.Default.emoji_cache/0","type":"function","doc":"The default guild cache: Crux.Cache.Emoji."},{"ref":"Crux.Cache.Default.html#guild_cache/0","title":"Crux.Cache.Default.guild_cache/0","type":"function","doc":"The default guild cache."},{"ref":"Crux.Cache.Default.html#presence_cache/0","title":"Crux.Cache.Default.presence_cache/0","type":"function","doc":"The default guild cache: Crux.Cache.Presence."},{"ref":"Crux.Cache.Default.html#user_cache/0","title":"Crux.Cache.Default.user_cache/0","type":"function","doc":"The default guild cache: Crux.Cache.User."},{"ref":"Crux.Cache.Emoji.html","title":"Crux.Cache.Emoji","type":"module","doc":"Default Crux.Structs.Emoji cache."},{"ref":"Crux.Cache.Emoji.html#child_spec/1","title":"Crux.Cache.Emoji.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Cache.Emoji.html#delete/1","title":"Crux.Cache.Emoji.delete/1","type":"function","doc":"Deletes data from the cache by key. Callback implementation for Crux.Cache.delete/1."},{"ref":"Crux.Cache.Emoji.html#fetch/1","title":"Crux.Cache.Emoji.fetch/1","type":"function","doc":"Fetches data from the cache by key. Callback implementation for Crux.Cache.fetch/1."},{"ref":"Crux.Cache.Emoji.html#fetch!/1","title":"Crux.Cache.Emoji.fetch!/1","type":"function","doc":"Fetches data from the cache by key, raises if not found. Callback implementation for Crux.Cache.fetch!/1."},{"ref":"Crux.Cache.Emoji.html#insert/1","title":"Crux.Cache.Emoji.insert/1","type":"function","doc":"Inserts data into the cache. Returns the atomified data allowing the operation to be chained. For example something like that: id = raw_data |&gt; Cache.insert() |&gt; Map.get(:id) Callback implementation for Crux.Cache.insert/1."},{"ref":"Crux.Cache.Emoji.html#start_link/1","title":"Crux.Cache.Emoji.start_link/1","type":"function","doc":"Used to start anything fitting under a supervision tree, like for example a GenServer, instructed with handling the cache. Optional, you maybe want to use external caching, e.g. Redis, not requiring anything like that. Callback implementation for Crux.Cache.start_link/1."},{"ref":"Crux.Cache.Emoji.html#update/1","title":"Crux.Cache.Emoji.update/1","type":"function","doc":"Inserts data into the cache. Returns &quot;updated&quot; data including changes by merging.For example from a message embed update to a full message object content = partial_message # only contains `:id`, `:channel_id`, and `:embeds` |&gt; Cache.update() |&gt; Map.get(:content) # present if the message was cached previously Callback implementation for Crux.Cache.update/1."},{"ref":"Crux.Cache.Guild.html","title":"Crux.Cache.Guild","type":"module","doc":"Default Crux.Structs.Channel cache. Unlike other caches this one splits up to different guild processes handling their data individually."},{"ref":"Crux.Cache.Guild.html#child_spec/1","title":"Crux.Cache.Guild.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Cache.Guild.html#delete/1","title":"Crux.Cache.Guild.delete/1","type":"function","doc":"Deletes a: Crux.Structs.Member (if applicable, also their Crux.Structs.VoiceState) from the guild Crux.Structs.Role from the guild Crux.Structs.Channel from the guild Crux.Structs.Guild itself This will remove all associated channels and emojis from the appropriate caches."},{"ref":"Crux.Cache.Guild.html#fetch/1","title":"Crux.Cache.Guild.fetch/1","type":"function","doc":"Fetches a guild from the cache by id."},{"ref":"Crux.Cache.Guild.html#fetch!/1","title":"Crux.Cache.Guild.fetch!/1","type":"function","doc":"Fetches a guild from the cache by id, raises if not found."},{"ref":"Crux.Cache.Guild.html#insert/1","title":"Crux.Cache.Guild.insert/1","type":"function","doc":"Inserts a: Crux.Structs.Guild itself Crux.Structs.Member in it Chunk of Crux.Structs.Member Crux.Structs.Role Crux.Structs.Member&#39;s roles Crux.Structs.VoiceState"},{"ref":"Crux.Cache.Guild.html#lookup/1","title":"Crux.Cache.Guild.lookup/1","type":"function","doc":"Looks up the pid/0 of a Crux.Cache.Guild&#39;s GenServer by guild id."},{"ref":"Crux.Cache.Guild.html#update/1","title":"Crux.Cache.Guild.update/1","type":"function","doc":"Updates or inserts a: Crux.Structs.Guild itself Crux.Structs.Member in it Chunk of Crux.Structs.Member Crux.Structs.Role Crux.Structs.Member&#39;s roles Crux.Structs.VoiceState"},{"ref":"Crux.Cache.None.html","title":"Crux.Cache.None","type":"module","doc":"Functions both as Crux.Cache and Crux.Cache.Provider As Crux.Cache.Provider: returning Crux.Cache.None for all caches. As Crux.Cache: cache and update will always return the atomtified data. delete is a noop and returns :ok fetch is a noop and returns :error fetch! is a noop and raises an error."},{"ref":"Crux.Cache.None.html#channel_cache/0","title":"Crux.Cache.None.channel_cache/0","type":"function","doc":"Returns Crux.Cache.None."},{"ref":"Crux.Cache.None.html#delete/1","title":"Crux.Cache.None.delete/1","type":"function","doc":"Is a noop returning :ok."},{"ref":"Crux.Cache.None.html#emoji_cache/0","title":"Crux.Cache.None.emoji_cache/0","type":"function","doc":"Returns Crux.Cache.None."},{"ref":"Crux.Cache.None.html#fetch/1","title":"Crux.Cache.None.fetch/1","type":"function","doc":"Is a noop returning :error."},{"ref":"Crux.Cache.None.html#fetch!/1","title":"Crux.Cache.None.fetch!/1","type":"function","doc":"Is a noop raising an error."},{"ref":"Crux.Cache.None.html#guild_cache/0","title":"Crux.Cache.None.guild_cache/0","type":"function","doc":"Returns Crux.Cache.None."},{"ref":"Crux.Cache.None.html#insert/1","title":"Crux.Cache.None.insert/1","type":"function","doc":"Returns atomified data as is."},{"ref":"Crux.Cache.None.html#presence_cache/0","title":"Crux.Cache.None.presence_cache/0","type":"function","doc":"Returns Crux.Cache.None."},{"ref":"Crux.Cache.None.html#update/1","title":"Crux.Cache.None.update/1","type":"function","doc":"Returns atomified data as is."},{"ref":"Crux.Cache.None.html#user_cache/0","title":"Crux.Cache.None.user_cache/0","type":"function","doc":"Returns Crux.Cache.None."},{"ref":"Crux.Cache.Presence.html","title":"Crux.Cache.Presence","type":"module","doc":"Default Crux.Structs.Presence cache."},{"ref":"Crux.Cache.Presence.html#child_spec/1","title":"Crux.Cache.Presence.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Cache.Presence.html#delete/1","title":"Crux.Cache.Presence.delete/1","type":"function","doc":"Deletes data from the cache by key. Callback implementation for Crux.Cache.delete/1."},{"ref":"Crux.Cache.Presence.html#fetch/1","title":"Crux.Cache.Presence.fetch/1","type":"function","doc":"Fetches data from the cache by key. Callback implementation for Crux.Cache.fetch/1."},{"ref":"Crux.Cache.Presence.html#fetch!/1","title":"Crux.Cache.Presence.fetch!/1","type":"function","doc":"Fetches data from the cache by key, raises if not found. Callback implementation for Crux.Cache.fetch!/1."},{"ref":"Crux.Cache.Presence.html#insert/1","title":"Crux.Cache.Presence.insert/1","type":"function","doc":"Inserts data into the cache. Returns the atomified data allowing the operation to be chained. For example something like that: id = raw_data |&gt; Cache.insert() |&gt; Map.get(:id) Callback implementation for Crux.Cache.insert/1."},{"ref":"Crux.Cache.Presence.html#start_link/1","title":"Crux.Cache.Presence.start_link/1","type":"function","doc":"Used to start anything fitting under a supervision tree, like for example a GenServer, instructed with handling the cache. Optional, you maybe want to use external caching, e.g. Redis, not requiring anything like that. Callback implementation for Crux.Cache.start_link/1."},{"ref":"Crux.Cache.Presence.html#update/1","title":"Crux.Cache.Presence.update/1","type":"function","doc":"Inserts data into the cache. Returns &quot;updated&quot; data including changes by merging.For example from a message embed update to a full message object content = partial_message # only contains `:id`, `:channel_id`, and `:embeds` |&gt; Cache.update() |&gt; Map.get(:content) # present if the message was cached previously Callback implementation for Crux.Cache.update/1."},{"ref":"Crux.Cache.Provider.html","title":"Crux.Cache.Provider","type":"behaviour","doc":"A behaviour module for cache providers. Caches with a start_link function will be automatically put under the supervision tree when starting the module implementing this behaviour."},{"ref":"Crux.Cache.Provider.html#c:channel_cache/0","title":"Crux.Cache.Provider.channel_cache/0","type":"callback","doc":"Fetches the module handling the channel cache."},{"ref":"Crux.Cache.Provider.html#c:emoji_cache/0","title":"Crux.Cache.Provider.emoji_cache/0","type":"callback","doc":"Fetches the module handling the channel cache."},{"ref":"Crux.Cache.Provider.html#c:guild_cache/0","title":"Crux.Cache.Provider.guild_cache/0","type":"callback","doc":"Fetches the module handling the guild cache."},{"ref":"Crux.Cache.Provider.html#c:presence_cache/0","title":"Crux.Cache.Provider.presence_cache/0","type":"callback","doc":"Fetches the module handling the presence cache."},{"ref":"Crux.Cache.Provider.html#c:user_cache/0","title":"Crux.Cache.Provider.user_cache/0","type":"callback","doc":"Fetches the module handling the user cache."},{"ref":"Crux.Cache.User.html","title":"Crux.Cache.User","type":"module","doc":"Default Crux.Structs.User cache. Difference opposed to &quot;regular&quot; base caches. Has me/0, me!/0 and me/1 functions to specify or retrieve the own user."},{"ref":"Crux.Cache.User.html#child_spec/1","title":"Crux.Cache.User.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Cache.User.html#delete/1","title":"Crux.Cache.User.delete/1","type":"function","doc":"Deletes data from the cache by key. Callback implementation for Crux.Cache.delete/1."},{"ref":"Crux.Cache.User.html#fetch/1","title":"Crux.Cache.User.fetch/1","type":"function","doc":"Fetches data from the cache by key. Callback implementation for Crux.Cache.fetch/1."},{"ref":"Crux.Cache.User.html#fetch!/1","title":"Crux.Cache.User.fetch!/1","type":"function","doc":"Fetches data from the cache by key, raises if not found. Callback implementation for Crux.Cache.fetch!/1."},{"ref":"Crux.Cache.User.html#insert/1","title":"Crux.Cache.User.insert/1","type":"function","doc":"Inserts data into the cache. Returns the atomified data allowing the operation to be chained. For example something like that: id = raw_data |&gt; Cache.insert() |&gt; Map.get(:id) Callback implementation for Crux.Cache.insert/1."},{"ref":"Crux.Cache.User.html#me/0","title":"Crux.Cache.User.me/0","type":"function","doc":"Fetches the own user."},{"ref":"Crux.Cache.User.html#me/1","title":"Crux.Cache.User.me/1","type":"function","doc":"Sets the id of the own user, the data itself has to be inserted into the cache like usual."},{"ref":"Crux.Cache.User.html#me!/0","title":"Crux.Cache.User.me!/0","type":"function","doc":"Fetches the own user, raises if not cached."},{"ref":"Crux.Cache.User.html#start_link/1","title":"Crux.Cache.User.start_link/1","type":"function","doc":"Used to start anything fitting under a supervision tree, like for example a GenServer, instructed with handling the cache. Optional, you maybe want to use external caching, e.g. Redis, not requiring anything like that. Callback implementation for Crux.Cache.start_link/1."},{"ref":"Crux.Cache.User.html#update/1","title":"Crux.Cache.User.update/1","type":"function","doc":"Inserts data into the cache. Returns &quot;updated&quot; data including changes by merging.For example from a message embed update to a full message object content = partial_message # only contains `:id`, `:channel_id`, and `:embeds` |&gt; Cache.update() |&gt; Map.get(:content) # present if the message was cached previously Callback implementation for Crux.Cache.update/1."},{"ref":"Crux.Extensions.html","title":"Crux.Extensions","type":"module","doc":"TODO: Some kind of description Relevant modules: Crux.Extensions.Command: Behaviour module being used to compose command pipelines"},{"ref":"Crux.Extensions.Command.html","title":"Crux.Extensions.Command","type":"behaviour","doc":"Behaviour module used to compose command pipelines. Examples A Simple Ping Command defmodule MyBot.Command.Ping do use Crux.Extensions.Command def triggers(), do: [&quot;ping&quot;] def call(command, _opts) do set_response(command, content: &quot;Pong!&quot;) end end A Simple Middleware Command defmodule MyBot.Middleware.FetchPicture do use Crux.Extensions.Command def call(command, opts) do # Default the type to :cat type = Keyword.get(opts, :type, :cat) case MyBot.Api.fetch_picture(type) do {:ok, picture} -&gt; assign(command, :picture, picture) {:error, _error} -&gt; command |&gt; set_response(content: &quot;An error occurred while fetching the picture.&quot;) # Halt the pipeline to stop any further execution of commands or middlewares |&gt; halt() end end end Using the Middleware Command defmodule MyBot.Command.Dog do use Crux.Extensions.Command def triggers(), do: [&quot;dog&quot;] # Specify the type of :dog def required(), do: [{MyBot.Middleware.FetchPicture, type: :dog}] def call(command, _opts) do set_response(command, content: &quot;Your dog picture link: \#{command.assigns.picture}&quot;) end end"},{"ref":"Crux.Extensions.Command.html#assign/3","title":"Crux.Extensions.Command.assign/3","type":"function","doc":"Assigns an arbitrary value to an atom key, which is accessible under the assigns field of a Command."},{"ref":"Crux.Extensions.Command.html#c:call/2","title":"Crux.Extensions.Command.call/2","type":"callback","doc":"Exeucting this command module."},{"ref":"Crux.Extensions.Command.html#halt/1","title":"Crux.Extensions.Command.halt/1","type":"function","doc":"Halts this command, no other commands will be executed fater this one."},{"ref":"Crux.Extensions.Command.html#c:required/0","title":"Crux.Extensions.Command.required/0","type":"callback","doc":"Returns a list of required command modules to run before this one."},{"ref":"Crux.Extensions.Command.html#set_response/2","title":"Crux.Extensions.Command.set_response/2","type":"function","doc":"Sets the response content for this command."},{"ref":"Crux.Extensions.Command.html#set_response_channel/2","title":"Crux.Extensions.Command.set_response_channel/2","type":"function","doc":"Sets the response channel for this command."},{"ref":"Crux.Extensions.Command.html#c:triggers/0","title":"Crux.Extensions.Command.triggers/0","type":"callback","doc":"List of possible triggers for this command module. Only used and required for primarily handled commands."},{"ref":"Crux.Extensions.Command.html#t:command/0","title":"Crux.Extensions.Command.command/0","type":"type","doc":"A command module, or command module and options tuple."},{"ref":"Crux.Extensions.Command.html#t:command_mod/0","title":"Crux.Extensions.Command.command_mod/0","type":"type","doc":"A module implementing the Crux.Extensions.Command behaviour."},{"ref":"Crux.Extensions.Command.html#t:command_opts/0","title":"Crux.Extensions.Command.command_opts/0","type":"type","doc":"Options being passed to the call/2 of a command_mod/0. The exact type is defined by the command itself."},{"ref":"Crux.Extensions.Command.html#t:t/0","title":"Crux.Extensions.Command.t/0","type":"type","doc":"Represents the current state of an executing command."},{"ref":"Crux.Extensions.Command.Handler.html","title":"Crux.Extensions.Command.Handler","type":"behaviour","doc":"Handler module serving as entry point for command pipelines. Example defmodule MyBot.Handler do use Crux.Extensions.Command.Handler def commands() do [ MyBot.Command.Ping, MyBot.Command.Dog ] end def producers(), do: MyBot.Producers.fetch() def rest(), do: MyBot.Rest def prefixes(), do: [&quot;!&quot;] end"},{"ref":"Crux.Extensions.Command.Handler.html#c:commands/0","title":"Crux.Extensions.Command.Handler.commands/0","type":"callback","doc":"Gets all available commands."},{"ref":"Crux.Extensions.Command.Handler.html#c:handle_prefixes/1","title":"Crux.Extensions.Command.Handler.handle_prefixes/1","type":"callback","doc":"Removes the prefix from content. Returns a list of: {:ok, content} if a prefix matched :error if a prefix did not"},{"ref":"Crux.Extensions.Command.Handler.html#c:match_commands/3","title":"Crux.Extensions.Command.Handler.match_commands/3","type":"callback","doc":"Gets all commands matching the given content."},{"ref":"Crux.Extensions.Command.Handler.html#c:on_error/2","title":"Crux.Extensions.Command.Handler.on_error/2","type":"callback","doc":"Called when an error occured. &gt; Not implementing this function causes any errors to terminate the handling process."},{"ref":"Crux.Extensions.Command.Handler.html#c:prefixes/0","title":"Crux.Extensions.Command.Handler.prefixes/0","type":"callback","doc":"Gets the current prefixes. &gt; nil is used for &quot;no prefix&quot;"},{"ref":"Crux.Extensions.Command.Handler.html#c:producers/0","title":"Crux.Extensions.Command.Handler.producers/0","type":"callback","doc":"Gets the current producers."},{"ref":"Crux.Extensions.Command.Handler.html#c:respond/1","title":"Crux.Extensions.Command.Handler.respond/1","type":"callback","doc":"Called after the command is done to send the response."},{"ref":"Crux.Extensions.Command.Handler.html#c:rest/0","title":"Crux.Extensions.Command.Handler.rest/0","type":"callback","doc":"Gets the module handling rest. &gt; See Crux.Rest"},{"ref":"Crux.Gateway.html","title":"Crux.Gateway","type":"module","doc":"Main entry point for Crux.Gateway. This module fits under a supervision tree, see start_link/1 arguments for configuration."},{"ref":"Crux.Gateway.html#child_spec/1","title":"Crux.Gateway.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Crux.Gateway.html#start_link/1","title":"Crux.Gateway.start_link/1","type":"function","doc":"Starts a Crux.Gateway process linked to the current process. Options are either just options/0 or a tuple of options/0 and Supervisor.options/0."},{"ref":"Crux.Gateway.html#t:gateway/0","title":"Crux.Gateway.gateway/0","type":"type","doc":"The gateway reference"},{"ref":"Crux.Gateway.html#t:options/0","title":"Crux.Gateway.options/0","type":"type","doc":"Used to start Crux.Gateway. See start_link/1 Notes: :token can be retrieved from here. :url you can GET from /gateway/bot (or Crux.Rest.gateway_bot/0). :shard_count same as :url. Optionally :shards, which has to be a list of numbers and ranges.Examples: [1..3], [1, 2, 3], [1..3, 8, 9] Defaults to 0..shard_count-1. Optionally :presence, which is used for the initial presence of every session.This should be a map with a &quot;game&quot; and &quot;status&quot; key, or a function with an arity of one (the shard id) and returning such a map, or nil for the default.If a function, it will be invoked whenever a shard is about to identify. Defaults to %{&quot;game&quot; =&gt; nil, &quot;status&quot; =&gt; &quot;online&quot;}. Optionally :guild_subscriptions, aids large or generally stateless bots by opting out of several events and less data being sent over the gateway.For more information see Discord Docs and the relevant PR on GitHub. Defaults to true Optionally :dispatcher, which has to be a valid GenStage.Dispatcher or a tuple of one and initial state.See Crux.Gateway.Connection.Producer for more info. Defaults to GenStage.BroadcastDispatcher"},{"ref":"Crux.Gateway.html#t:presence/0","title":"Crux.Gateway.presence/0","type":"type","doc":"Used as initial presence for every session."},{"ref":"Crux.Gateway.Command.html","title":"Crux.Gateway.Command","type":"module","doc":"Builds Gateway Commands.Note: Only the sent ones can be found here. A list of available op codes: OP CodeName 0dispatchreceived only 1heartbeattwo way 2identifysent only 3status_updatesent only 4voice_state_updatesent only 5voice_guild_pingsent only 6resumesent only 7reconnectreceived only 8request_guild_memberssent only 9invalid_sessionreceived only 10helloreceived only 11heartbeat_ackreceived only Gateway Lifecycle Flowchart"},{"ref":"Crux.Gateway.Command.html#heartbeat/1","title":"Crux.Gateway.Command.heartbeat/1","type":"function","doc":"Builds a Heartbeat command. Used to signalize the server that the client is still alive and able to receive messages."},{"ref":"Crux.Gateway.Command.html#identify/1","title":"Crux.Gateway.Command.identify/1","type":"function","doc":"Builds an Identify command. Used to identify the gateway connection and &quot;log in&quot;."},{"ref":"Crux.Gateway.Command.html#request_guild_members/2","title":"Crux.Gateway.Command.request_guild_members/2","type":"function","doc":"Builds a Request Guild Members command. Used to request guild member for a specific guild. Note: This must be sent to the connection handling the guild, not just any connection. The gateway will respond with :GUILD_MEMBER_CHUNK packets until all appropriate members are received."},{"ref":"Crux.Gateway.Command.html#resume/1","title":"Crux.Gateway.Command.resume/1","type":"function","doc":"Builds a Resume command. Used to resume into a session which was unexpectly disconnected and may be resumable."},{"ref":"Crux.Gateway.Command.html#status_update/2","title":"Crux.Gateway.Command.status_update/2","type":"function","doc":"Builds a Status Update command. Used to update the status of the client, including activity."},{"ref":"Crux.Gateway.Command.html#voice_state_update/3","title":"Crux.Gateway.Command.voice_state_update/3","type":"function","doc":"Builds a Voice State Update command. Used to join, switch between, and leave voice channels and/or change self_mute or self_deaf states."},{"ref":"Crux.Gateway.Command.html#t:activity/0","title":"Crux.Gateway.Command.activity/0","type":"type","doc":"Used to set an activity via status_update/2. :type must be a valid Activity Type Note that streaming requires a twitch url pointing to a possible channel!"},{"ref":"Crux.Gateway.Command.html#t:command/0","title":"Crux.Gateway.Command.command/0","type":"type","doc":"Encoded command ready to be sent to the gateway via Crux.Gateway.Connection.send_command/3. If you want to build custom commands, pass :erlang.term_to_binary/1 a map with the keys op and d, and wrap it in a tuple with :binary as first element."},{"ref":"Crux.Gateway.Connection.html","title":"Crux.Gateway.Connection","type":"module","doc":"Module handling the actual connection (shard) to Discord."},{"ref":"Crux.Gateway.Connection.html#send_command/3","title":"Crux.Gateway.Connection.send_command/3","type":"function","doc":"Sends a command to the specified shard. Will be run through a rate limiter which blocks the current process."},{"ref":"Crux.Gateway.Connection.Producer.html","title":"Crux.Gateway.Connection.Producer","type":"module","doc":"Handles dispatching of packets received from the gateway. Every Crux.Gateway.Connection (shard) has its own producer, defaults to GenStage.BroadcastDispatchers. The dispatcher can be overriden via Crux.Gateway.options/0 For more informations regarding Consumers and Producers consult GenStage&#39;s documentation."},{"ref":"Crux.Gateway.Connection.Producer.html#producers/1","title":"Crux.Gateway.Connection.Producer.producers/1","type":"function","doc":"Computes a map of all producer pid/0s keyed by shard_id."},{"ref":"Mix.Tasks.Bangify.html","title":"Mix.Tasks.Bangify","type":"task","doc":""},{"ref":"Mix.Tasks.Bangify.html#callbacks/0","title":"Mix.Tasks.Bangify.callbacks/0","type":"function","doc":""},{"ref":"Mix.Tasks.Bangify.html#functions/0","title":"Mix.Tasks.Bangify.functions/0","type":"function","doc":""},{"ref":"Mix.Tasks.Bangify.html#run/1","title":"Mix.Tasks.Bangify.run/1","type":"function","doc":"A task needs to implement run which receivesa list of command line args. Callback implementation for Mix.Task.run/1."},{"ref":"Crux.Rest.html","title":"Crux.Rest","type":"behaviour","doc":"Main entry point for Crux.Rest. For a more convenient way to consume this module you can use it in your own. Possible use options are: transform - whether to transform the received JSON further into the documented structs.Defaults to true. Example defmodule MyBot.Rest do use Crux.Rest # Define helper functions as needed def gateway_bot_additional_info() do with {:ok, data} &lt;- gateway_bot() do Map.put(data, &quot;additional_info&quot;, MyBot.Additional.info()) end end end This module fits under a supervision tree, see start_link/1&#39;s&#39; arguments for configuration. The same applies to modules use-ing this module."},{"ref":"Crux.Rest.html#c:add_guild_member/3","title":"Crux.Rest.add_guild_member/3","type":"callback","doc":"Adds a user to a guild via a provided oauth2 access token with the guilds.join scope. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:add_guild_member!/3","title":"Crux.Rest.add_guild_member!/3","type":"callback","doc":"The same as add_guild_member/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:add_guild_member_role/4","title":"Crux.Rest.add_guild_member_role/4","type":"callback","doc":"Adds a role to a member. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:add_guild_member_role!/4","title":"Crux.Rest.add_guild_member_role!/4","type":"callback","doc":"The same as add_guild_member_role/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:add_pinned_message/1","title":"Crux.Rest.add_pinned_message/1","type":"callback","doc":"Adds a message to the pinned messages of a channel. You may only have up to 50 pinned messages per channel. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:add_pinned_message/2","title":"Crux.Rest.add_pinned_message/2","type":"callback","doc":"Adds a message to the pinned messages of a channel. You may only have up to 50 pinned messages per channel. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:add_pinned_message!/1","title":"Crux.Rest.add_pinned_message!/1","type":"callback","doc":"The same as add_pinned_message/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:add_pinned_message!/2","title":"Crux.Rest.add_pinned_message!/2","type":"callback","doc":"The same as add_pinned_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:begin_guild_prune/2","title":"Crux.Rest.begin_guild_prune/2","type":"callback","doc":"Prunes members in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:begin_guild_prune!/2","title":"Crux.Rest.begin_guild_prune!/2","type":"callback","doc":"The same as begin_guild_prune/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_channel_invite/2","title":"Crux.Rest.create_channel_invite/2","type":"callback","doc":"Creates an invite to a channel, see Crux.Rest.create_channel_invite_data/0 for available options. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_channel_invite!/2","title":"Crux.Rest.create_channel_invite!/2","type":"callback","doc":"The same as create_channel_invite/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_dm/1","title":"Crux.Rest.create_dm/1","type":"callback","doc":"Creates a new dm channel with a user. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_dm!/1","title":"Crux.Rest.create_dm!/1","type":"callback","doc":"The same as create_dm/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild/1","title":"Crux.Rest.create_guild/1","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:create_guild!/1","title":"Crux.Rest.create_guild!/1","type":"callback","doc":"The same as create_guild/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild_ban/3","title":"Crux.Rest.create_guild_ban/3","type":"callback","doc":"Bans a user from a guild; The user does not have to be part of the guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_guild_ban!/3","title":"Crux.Rest.create_guild_ban!/3","type":"callback","doc":"The same as create_guild_ban/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild_channel/2","title":"Crux.Rest.create_guild_channel/2","type":"callback","doc":"Creates a channel in a guild, see Crux.Rest.create_guild_channel_data/0 for available options. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_guild_channel!/2","title":"Crux.Rest.create_guild_channel!/2","type":"callback","doc":"The same as create_guild_channel/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild_emoji/2","title":"Crux.Rest.create_guild_emoji/2","type":"callback","doc":"Creates an emoji in a guild, see Crux.Rest.create_guild_emoji_data/0 for available options. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_guild_emoji!/2","title":"Crux.Rest.create_guild_emoji!/2","type":"callback","doc":"The same as create_guild_emoji/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild_integration/2","title":"Crux.Rest.create_guild_integration/2","type":"callback","doc":"Attaches an integration from the current user to a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_guild_integration!/2","title":"Crux.Rest.create_guild_integration!/2","type":"callback","doc":"The same as create_guild_integration/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_guild_role/2","title":"Crux.Rest.create_guild_role/2","type":"callback","doc":"Creates a role in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_guild_role!/2","title":"Crux.Rest.create_guild_role!/2","type":"callback","doc":"The same as create_guild_role/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_message/2","title":"Crux.Rest.create_message/2","type":"callback","doc":"Sends a message to a channel. For more informations see Discord Docs"},{"ref":"Crux.Rest.html#c:create_message!/2","title":"Crux.Rest.create_message!/2","type":"callback","doc":"The same as create_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_reaction/2","title":"Crux.Rest.create_reaction/2","type":"callback","doc":"Creates a reaction on a message, or increases its count by one. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_reaction/3","title":"Crux.Rest.create_reaction/3","type":"callback","doc":"Creates a reaction on a message, or increases its count by one. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:create_reaction!/2","title":"Crux.Rest.create_reaction!/2","type":"callback","doc":"The same as create_reaction/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:create_reaction!/3","title":"Crux.Rest.create_reaction!/3","type":"callback","doc":"The same as create_reaction/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_all_reactions/2","title":"Crux.Rest.delete_all_reactions/2","type":"callback","doc":"Deletes all reactions from a message. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_all_reactions/3","title":"Crux.Rest.delete_all_reactions/3","type":"callback","doc":"Deletes all reactions from a message. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_all_reactions!/2","title":"Crux.Rest.delete_all_reactions!/2","type":"callback","doc":"The same as delete_all_reactions/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_all_reactions!/3","title":"Crux.Rest.delete_all_reactions!/3","type":"callback","doc":"The same as delete_all_reactions/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_channel/2","title":"Crux.Rest.delete_channel/2","type":"callback","doc":"Deletes a channel. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_channel!/2","title":"Crux.Rest.delete_channel!/2","type":"callback","doc":"The same as delete_channel/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_channel_permissions/3","title":"Crux.Rest.delete_channel_permissions/3","type":"callback","doc":"Deletes an overwrite from a channel. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_channel_permissions!/3","title":"Crux.Rest.delete_channel_permissions!/3","type":"callback","doc":"The same as delete_channel_permissions/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_guild/1","title":"Crux.Rest.delete_guild/1","type":"callback","doc":"Deletes a guild, can only be used if the executing user is the owner of the guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_guild!/1","title":"Crux.Rest.delete_guild!/1","type":"callback","doc":"The same as delete_guild/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_guild_emoji/3","title":"Crux.Rest.delete_guild_emoji/3","type":"callback","doc":"Deletes an emoji from a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_guild_emoji!/3","title":"Crux.Rest.delete_guild_emoji!/3","type":"callback","doc":"The same as delete_guild_emoji/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_guild_integration/2","title":"Crux.Rest.delete_guild_integration/2","type":"callback","doc":"Deletes an integration from a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_guild_integration!/2","title":"Crux.Rest.delete_guild_integration!/2","type":"callback","doc":"The same as delete_guild_integration/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_guild_role/3","title":"Crux.Rest.delete_guild_role/3","type":"callback","doc":"Deletes a role in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_guild_role!/3","title":"Crux.Rest.delete_guild_role!/3","type":"callback","doc":"The same as delete_guild_role/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_invite/1","title":"Crux.Rest.delete_invite/1","type":"callback","doc":"Deletes an invite. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_invite!/1","title":"Crux.Rest.delete_invite!/1","type":"callback","doc":"The same as delete_invite/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_message/1","title":"Crux.Rest.delete_message/1","type":"callback","doc":"Deletes a message For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_message/2","title":"Crux.Rest.delete_message/2","type":"callback","doc":"Deletes a message For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_message!/1","title":"Crux.Rest.delete_message!/1","type":"callback","doc":"The same as delete_message/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_message!/2","title":"Crux.Rest.delete_message!/2","type":"callback","doc":"The same as delete_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_messages/2","title":"Crux.Rest.delete_messages/2","type":"callback","doc":"Deletes 2-100 messages not older than 14 days. For more informations see Discord Docs"},{"ref":"Crux.Rest.html#c:delete_messages!/2","title":"Crux.Rest.delete_messages!/2","type":"callback","doc":"The same as delete_messages/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_pinned_message/1","title":"Crux.Rest.delete_pinned_message/1","type":"callback","doc":"Deletes a message from the pinned messages. This does not delete the message itself. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_pinned_message/2","title":"Crux.Rest.delete_pinned_message/2","type":"callback","doc":"Deletes a message from the pinned messages. This does not delete the message itself. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:delete_pinned_message!/1","title":"Crux.Rest.delete_pinned_message!/1","type":"callback","doc":"The same as delete_pinned_message/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_pinned_message!/2","title":"Crux.Rest.delete_pinned_message!/2","type":"callback","doc":"The same as delete_pinned_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_reaction/4","title":"Crux.Rest.delete_reaction/4","type":"callback","doc":"Deletes a user from a reaction. The first argument is optional if a Crux.Structs.Message is provided. For more informations see Discord Docs 2."},{"ref":"Crux.Rest.html#c:delete_reaction!/4","title":"Crux.Rest.delete_reaction!/4","type":"callback","doc":"The same as delete_reaction/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:delete_webhook/2","title":"Crux.Rest.delete_webhook/2","type":"callback","doc":"Deletes a webhook For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:delete_webhook!/2","title":"Crux.Rest.delete_webhook!/2","type":"callback","doc":"The same as delete_webhook/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:edit_channel_permissions/3","title":"Crux.Rest.edit_channel_permissions/3","type":"callback","doc":"Edits or creates an overwrite for a user, or member. If an id is provided for :target, :type must be specified in Crux.Rest.edit_channel_permissions_data/0. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:edit_channel_permissions!/3","title":"Crux.Rest.edit_channel_permissions!/3","type":"callback","doc":"The same as edit_channel_permissions/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:edit_message/2","title":"Crux.Rest.edit_message/2","type":"callback","doc":"Edits a message. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:edit_message/3","title":"Crux.Rest.edit_message/3","type":"callback","doc":"Edits a message. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:edit_message!/2","title":"Crux.Rest.edit_message!/2","type":"callback","doc":"The same as edit_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:edit_message!/3","title":"Crux.Rest.edit_message!/3","type":"callback","doc":"The same as edit_message/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_github_webhook/3","title":"Crux.Rest.execute_github_webhook/3","type":"callback","doc":"Executes a github webhook Returns :ok by default. If wait parameter is set to true, it will either return :ok or an error tuple. Discord does not return the message object unlike the regular webhook endpoint. The event parameter is passed into the &quot;x-github-event&quot; header. If this is not set to a valid event (e.g, &quot;push&quot;, &quot;issue&quot;), discord will not send the webhook but still return 204 OK For more information see Github Docs"},{"ref":"Crux.Rest.html#c:execute_github_webhook/4","title":"Crux.Rest.execute_github_webhook/4","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_github_webhook/5","title":"Crux.Rest.execute_github_webhook/5","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_github_webhook!/3","title":"Crux.Rest.execute_github_webhook!/3","type":"callback","doc":"The same as execute_github_webhook/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_github_webhook!/4","title":"Crux.Rest.execute_github_webhook!/4","type":"callback","doc":"The same as execute_github_webhook/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_github_webhook!/5","title":"Crux.Rest.execute_github_webhook!/5","type":"callback","doc":"The same as execute_github_webhook/5, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_slack_webhook/2","title":"Crux.Rest.execute_slack_webhook/2","type":"callback","doc":"Executes a slack webhook Returns :ok by default. If wait parameter is set to true, it will either return :ok or an error tuple. Discord does not return the message object unlike the regular webhook endpoint. For more information see Slack Docs"},{"ref":"Crux.Rest.html#c:execute_slack_webhook/3","title":"Crux.Rest.execute_slack_webhook/3","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_slack_webhook/4","title":"Crux.Rest.execute_slack_webhook/4","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_slack_webhook!/2","title":"Crux.Rest.execute_slack_webhook!/2","type":"callback","doc":"The same as execute_slack_webhook/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_slack_webhook!/3","title":"Crux.Rest.execute_slack_webhook!/3","type":"callback","doc":"The same as execute_slack_webhook/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_slack_webhook!/4","title":"Crux.Rest.execute_slack_webhook!/4","type":"callback","doc":"The same as execute_slack_webhook/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_webhook/2","title":"Crux.Rest.execute_webhook/2","type":"callback","doc":"Executes a webhook Returns :ok by default. If wait parameter is set to true, returns a tuple returning the message object or error For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:execute_webhook/3","title":"Crux.Rest.execute_webhook/3","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_webhook/4","title":"Crux.Rest.execute_webhook/4","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:execute_webhook!/2","title":"Crux.Rest.execute_webhook!/2","type":"callback","doc":"The same as execute_webhook/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_webhook!/3","title":"Crux.Rest.execute_webhook!/3","type":"callback","doc":"The same as execute_webhook/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:execute_webhook!/4","title":"Crux.Rest.execute_webhook!/4","type":"callback","doc":"The same as execute_webhook/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:gateway/0","title":"Crux.Rest.gateway/0","type":"callback","doc":"Gets the gateway url from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:gateway!/0","title":"Crux.Rest.gateway!/0","type":"callback","doc":"The same as gateway/0, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:gateway_bot/0","title":"Crux.Rest.gateway_bot/0","type":"callback","doc":"Gets the gateway url along a recommended shards count from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:gateway_bot!/0","title":"Crux.Rest.gateway_bot!/0","type":"callback","doc":"The same as gateway_bot/0, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_audit_logs/2","title":"Crux.Rest.get_audit_logs/2","type":"callback","doc":"Gets the audit logs for a guild"},{"ref":"Crux.Rest.html#c:get_audit_logs!/2","title":"Crux.Rest.get_audit_logs!/2","type":"callback","doc":"The same as get_audit_logs/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_channel/1","title":"Crux.Rest.get_channel/1","type":"callback","doc":"Gets a channel from the api. This should NOT be necessary. For more informations see Discord Docs"},{"ref":"Crux.Rest.html#c:get_channel!/1","title":"Crux.Rest.get_channel!/1","type":"callback","doc":"The same as get_channel/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_channel_invites/1","title":"Crux.Rest.get_channel_invites/1","type":"callback","doc":"Gets invites for the specified channel from the api. For more informations see Discord Docs"},{"ref":"Crux.Rest.html#c:get_channel_invites!/1","title":"Crux.Rest.get_channel_invites!/1","type":"callback","doc":"The same as get_channel_invites/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_current_user/0","title":"Crux.Rest.get_current_user/0","type":"callback","doc":"Gets the current user from the api. For more information see Discord Docs."},{"ref":"Crux.Rest.html#c:get_current_user!/0","title":"Crux.Rest.get_current_user!/0","type":"callback","doc":"The same as get_current_user/0, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_current_user_guilds/1","title":"Crux.Rest.get_current_user_guilds/1","type":"callback","doc":"Gets a list of partial Crux.Structs.Guilds the current user is a member of. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_current_user_guilds!/1","title":"Crux.Rest.get_current_user_guilds!/1","type":"callback","doc":"The same as get_current_user_guilds/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild/1","title":"Crux.Rest.get_guild/1","type":"callback","doc":"Gets a guild from the api. This should usually, due to cache, NOT be necessary. For more informations see Discord Docs"},{"ref":"Crux.Rest.html#c:get_guild!/1","title":"Crux.Rest.get_guild!/1","type":"callback","doc":"The same as get_guild/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_ban/2","title":"Crux.Rest.get_guild_ban/2","type":"callback","doc":"Gets a single ban entry by id. Returns {:error, %Crux.Rest.ApiError{status_code: 404, code: 10026, ...}} when the user is not banned. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_ban!/2","title":"Crux.Rest.get_guild_ban!/2","type":"callback","doc":"The same as get_guild_ban/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_bans/1","title":"Crux.Rest.get_guild_bans/1","type":"callback","doc":"Gets a map of banned users along their ban reasons. For more informations see discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_bans!/1","title":"Crux.Rest.get_guild_bans!/1","type":"callback","doc":"The same as get_guild_bans/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_channels/1","title":"Crux.Rest.get_guild_channels/1","type":"callback","doc":"Gets all channels from a guild via the api. This should usually, due to caching, NOT be necessary. For more informations see Discord Docs-"},{"ref":"Crux.Rest.html#c:get_guild_channels!/1","title":"Crux.Rest.get_guild_channels!/1","type":"callback","doc":"The same as get_guild_channels/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_embed/1","title":"Crux.Rest.get_guild_embed/1","type":"callback","doc":"Gets a guild&#39;s embed (server widget). Returns a Guild Embed Object. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_embed!/1","title":"Crux.Rest.get_guild_embed!/1","type":"callback","doc":"The same as get_guild_embed/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_emoji/2","title":"Crux.Rest.get_guild_emoji/2","type":"callback","doc":"Gets an emoji from a guild This should usually, due to cache, NOT be necessary. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_emoji!/2","title":"Crux.Rest.get_guild_emoji!/2","type":"callback","doc":"The same as get_guild_emoji/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_integrations/1","title":"Crux.Rest.get_guild_integrations/1","type":"callback","doc":"Gets a list of guild integrations. Returns a list of Integration Objects. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_integrations!/1","title":"Crux.Rest.get_guild_integrations!/1","type":"callback","doc":"The same as get_guild_integrations/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_invites/1","title":"Crux.Rest.get_guild_invites/1","type":"callback","doc":"Gets all available invites in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_invites!/1","title":"Crux.Rest.get_guild_invites!/1","type":"callback","doc":"The same as get_guild_invites/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_member/2","title":"Crux.Rest.get_guild_member/2","type":"callback","doc":"Gets a member from the api. This may be necessary for offline members in large guilds. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_member!/2","title":"Crux.Rest.get_guild_member!/2","type":"callback","doc":"The same as get_guild_member/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_prune_count/2","title":"Crux.Rest.get_guild_prune_count/2","type":"callback","doc":"Gets the number of members in a guild that would be removed when pruned. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_prune_count!/2","title":"Crux.Rest.get_guild_prune_count!/2","type":"callback","doc":"The same as get_guild_prune_count/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_roles/1","title":"Crux.Rest.get_guild_roles/1","type":"callback","doc":"Gets a list of roles in a guild. This should usually, due to caching, NOT be necessary. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_roles!/1","title":"Crux.Rest.get_guild_roles!/1","type":"callback","doc":"The same as get_guild_roles/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_vanity_url/1","title":"Crux.Rest.get_guild_vanity_url/1","type":"callback","doc":"Gets the vanity url of a guild, if any"},{"ref":"Crux.Rest.html#c:get_guild_vanity_url!/1","title":"Crux.Rest.get_guild_vanity_url!/1","type":"callback","doc":"The same as get_guild_vanity_url/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_guild_voice_regions/1","title":"Crux.Rest.get_guild_voice_regions/1","type":"callback","doc":"Gets a list of voice regions for a guild. Returns VIP servers when the guild is VIP-enabled. Returns a list of Voice Region Objects. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_guild_voice_regions!/1","title":"Crux.Rest.get_guild_voice_regions!/1","type":"callback","doc":"The same as get_guild_voice_regions/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_invite/1","title":"Crux.Rest.get_invite/1","type":"callback","doc":"Gets an invite from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_invite!/1","title":"Crux.Rest.get_invite!/1","type":"callback","doc":"The same as get_invite/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_message/2","title":"Crux.Rest.get_message/2","type":"callback","doc":"Gets a message from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_message!/2","title":"Crux.Rest.get_message!/2","type":"callback","doc":"The same as get_message/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_messages/2","title":"Crux.Rest.get_messages/2","type":"callback","doc":"Gets 1-100 messages from the api, this limit is enforced on discord&#39;s end. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_messages!/2","title":"Crux.Rest.get_messages!/2","type":"callback","doc":"The same as get_messages/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_pinned_messages/1","title":"Crux.Rest.get_pinned_messages/1","type":"callback","doc":"Gets a list of pinned messages from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_pinned_messages!/1","title":"Crux.Rest.get_pinned_messages!/1","type":"callback","doc":"The same as get_pinned_messages/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_reactions/3","title":"Crux.Rest.get_reactions/3","type":"callback","doc":""},{"ref":"Crux.Rest.html#c:get_reactions/4","title":"Crux.Rest.get_reactions/4","type":"callback","doc":"Gets users who reacted to a message. The first argument is optional if a Crux.Structs.Message is provided. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_reactions!/3","title":"Crux.Rest.get_reactions!/3","type":"callback","doc":"The same as get_reactions/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_reactions!/4","title":"Crux.Rest.get_reactions!/4","type":"callback","doc":"The same as get_reactions/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_user/1","title":"Crux.Rest.get_user/1","type":"callback","doc":"Gets a user from the api. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:get_user!/1","title":"Crux.Rest.get_user!/1","type":"callback","doc":"The same as get_user/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:get_webhook/2","title":"Crux.Rest.get_webhook/2","type":"callback","doc":"Gets a webhook For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:get_webhook!/2","title":"Crux.Rest.get_webhook!/2","type":"callback","doc":"The same as get_webhook/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:leave_guild/1","title":"Crux.Rest.leave_guild/1","type":"callback","doc":"Leaves a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:leave_guild!/1","title":"Crux.Rest.leave_guild!/1","type":"callback","doc":"The same as leave_guild/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:list_channel_webhooks/1","title":"Crux.Rest.list_channel_webhooks/1","type":"callback","doc":"Gets a channel&#39;s webhook list For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:list_channel_webhooks!/1","title":"Crux.Rest.list_channel_webhooks!/1","type":"callback","doc":"The same as list_channel_webhooks/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:list_guild_emojis/1","title":"Crux.Rest.list_guild_emojis/1","type":"callback","doc":"Gets a list of emojis in a guild. This should usually, due to cache, NOT be necessary. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:list_guild_emojis!/1","title":"Crux.Rest.list_guild_emojis!/1","type":"callback","doc":"The same as list_guild_emojis/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:list_guild_members/2","title":"Crux.Rest.list_guild_members/2","type":"callback","doc":"Gets a list of members from the guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:list_guild_members!/2","title":"Crux.Rest.list_guild_members!/2","type":"callback","doc":"The same as list_guild_members/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:list_guild_webhooks/1","title":"Crux.Rest.list_guild_webhooks/1","type":"callback","doc":"Gets a guild&#39;s webhook list For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:list_guild_webhooks!/1","title":"Crux.Rest.list_guild_webhooks!/1","type":"callback","doc":"The same as list_guild_webhooks/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_channel/2","title":"Crux.Rest.modify_channel/2","type":"callback","doc":"Modifies a channel, see Crux.Rest.modify_channel_data/0 for available options. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_channel!/2","title":"Crux.Rest.modify_channel!/2","type":"callback","doc":"The same as modify_channel/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_current_user/1","title":"Crux.Rest.modify_current_user/1","type":"callback","doc":"Modifes the currently logged in user. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_current_user!/1","title":"Crux.Rest.modify_current_user!/1","type":"callback","doc":"The same as modify_current_user/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_current_users_nick/3","title":"Crux.Rest.modify_current_users_nick/3","type":"callback","doc":"Modifies the nickname of the current user in a guild. Yes, you read correctly, that has its own endpoint. Great, isn&#39;t it? For more informations, but not an answer to the question why, see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_current_users_nick!/3","title":"Crux.Rest.modify_current_users_nick!/3","type":"callback","doc":"The same as modify_current_users_nick/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild/2","title":"Crux.Rest.modify_guild/2","type":"callback","doc":"Updates a guild, see Crux.Rest.modify_guild_data/0 for available options. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild!/2","title":"Crux.Rest.modify_guild!/2","type":"callback","doc":"The same as modify_guild/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_channel_positions/2","title":"Crux.Rest.modify_guild_channel_positions/2","type":"callback","doc":"Modifyies the position of a list of channels in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_channel_positions!/2","title":"Crux.Rest.modify_guild_channel_positions!/2","type":"callback","doc":"The same as modify_guild_channel_positions/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_embed/2","title":"Crux.Rest.modify_guild_embed/2","type":"callback","doc":"Modifies a guild&#39;s embed (server widget). Returns the updated Guild Embed Object. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_embed!/2","title":"Crux.Rest.modify_guild_embed!/2","type":"callback","doc":"The same as modify_guild_embed/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_emoji/3","title":"Crux.Rest.modify_guild_emoji/3","type":"callback","doc":"Modifies a guild emoji. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_emoji!/3","title":"Crux.Rest.modify_guild_emoji!/3","type":"callback","doc":"The same as modify_guild_emoji/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_integration/3","title":"Crux.Rest.modify_guild_integration/3","type":"callback","doc":"Modifies an integreation for a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_integration!/3","title":"Crux.Rest.modify_guild_integration!/3","type":"callback","doc":"The same as modify_guild_integration/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_member/3","title":"Crux.Rest.modify_guild_member/3","type":"callback","doc":"Modifies a member in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_member!/3","title":"Crux.Rest.modify_guild_member!/3","type":"callback","doc":"The same as modify_guild_member/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_role/3","title":"Crux.Rest.modify_guild_role/3","type":"callback","doc":"Modifies a role in a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_role!/3","title":"Crux.Rest.modify_guild_role!/3","type":"callback","doc":"The same as modify_guild_role/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:modify_guild_role_positions/2","title":"Crux.Rest.modify_guild_role_positions/2","type":"callback","doc":"Modifies the positions of a list of role objects for a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:modify_guild_role_positions!/2","title":"Crux.Rest.modify_guild_role_positions!/2","type":"callback","doc":"The same as modify_guild_role_positions/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:remove_guild_ban/3","title":"Crux.Rest.remove_guild_ban/3","type":"callback","doc":"Removes a ban for a user from a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:remove_guild_ban!/3","title":"Crux.Rest.remove_guild_ban!/3","type":"callback","doc":"The same as remove_guild_ban/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:remove_guild_member_role/4","title":"Crux.Rest.remove_guild_member_role/4","type":"callback","doc":"Removes a role from a member. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:remove_guild_member_role!/4","title":"Crux.Rest.remove_guild_member_role!/4","type":"callback","doc":"The same as remove_guild_member_role/4, but raises an exception if it fails."},{"ref":"Crux.Rest.html#request/2","title":"Crux.Rest.request/2","type":"function","doc":"Executes a request."},{"ref":"Crux.Rest.html#request!/2","title":"Crux.Rest.request!/2","type":"function","doc":"Executes a request, but raises on error."},{"ref":"Crux.Rest.html#start_link/1","title":"Crux.Rest.start_link/1","type":"function","doc":"Starts a Crux.Rest process linked to the current process. Options are a tuple of a name atom and options/0."},{"ref":"Crux.Rest.html#c:sync_guild_integration/2","title":"Crux.Rest.sync_guild_integration/2","type":"callback","doc":"Syncs an integration for a guild. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:sync_guild_integration!/2","title":"Crux.Rest.sync_guild_integration!/2","type":"callback","doc":"The same as sync_guild_integration/2, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:trigger_typing/1","title":"Crux.Rest.trigger_typing/1","type":"callback","doc":"Lets the bot appear as typing for roughly ~9 seconds or until a message is sent. Should generally be used sparingly for commands that may take a while as a form of acknowledging. Consider sending a message and edit that later on instead. For more informations see Discord Docs."},{"ref":"Crux.Rest.html#c:trigger_typing!/1","title":"Crux.Rest.trigger_typing!/1","type":"callback","doc":"The same as trigger_typing/1, but raises an exception if it fails."},{"ref":"Crux.Rest.html#c:update_webhook/3","title":"Crux.Rest.update_webhook/3","type":"callback","doc":"Updates a webhook For more information see Discord Docs"},{"ref":"Crux.Rest.html#c:update_webhook!/3","title":"Crux.Rest.update_webhook!/3","type":"callback","doc":"The same as update_webhook/3, but raises an exception if it fails."},{"ref":"Crux.Rest.html#t:add_guild_member_data/0","title":"Crux.Rest.add_guild_member_data/0","type":"type","doc":"Used to add a member to a guild via add_guild_member/3."},{"ref":"Crux.Rest.html#t:audit_log_options/0","title":"Crux.Rest.audit_log_options/0","type":"type","doc":"Used to filter audit log results via get_audit_logs/2. The :user_id field refers to the executor and not the target of the log."},{"ref":"Crux.Rest.html#t:begin_guild_prune_opts/0","title":"Crux.Rest.begin_guild_prune_opts/0","type":"type","doc":"Used to prune inactive guild members with begin_guild_prune/2."},{"ref":"Crux.Rest.html#t:create_channel_invite_data/0","title":"Crux.Rest.create_channel_invite_data/0","type":"type","doc":"Used to create invites via create_channel_invite/2. Notes: :max_age 0 indicates no max age, defaults to 86_400 (1 day) :max_uses 0 indicates no max uses, defaults to 0 :temporary if true, members which do not get a role assigned within 24 hours get automatically kicked, defaults to false :unique if true, always creates a new invite instead of maybe returning a similar one, defaults to false For more informations see Discord Docs."},{"ref":"Crux.Rest.html#t:create_guild_channel_data/0","title":"Crux.Rest.create_guild_channel_data/0","type":"type","doc":"Used to create a channel via create_guild_channel/2. Notes: :name has to be [2-100] chars and may only contain [a-Z_-]"},{"ref":"Crux.Rest.html#t:create_guild_emoji_data/0","title":"Crux.Rest.create_guild_emoji_data/0","type":"type","doc":"Used to create emojis via create_guild_emoji/2. Notes: :name has to be [1-32] chars long, valid chars are [a-Z0-9] (invalid chars may get filtered out instead of erroring). A 1 char long name gets suffixed with `` to be 2 chars long. :image may not be larger than 256kb :roles, if present limits the emoji to only those roles"},{"ref":"Crux.Rest.html#t:create_message_data/0","title":"Crux.Rest.create_message_data/0","type":"type","doc":"Used to send messages via create_message/2. The content my not exceed 2000 chars. The nonce has to fit in a 64 bit integer. The whole message payload may not be larger than 8mb, this should only be possible when attaching (a) large file(s)."},{"ref":"Crux.Rest.html#t:edit_channel_permissions_data/0","title":"Crux.Rest.edit_channel_permissions_data/0","type":"type","doc":"Used to edit overwrites for a role or member with edit_channel_permissions/3 See Permissions for available bitflags."},{"ref":"Crux.Rest.html#t:embed/0","title":"Crux.Rest.embed/0","type":"type","doc":"Used to send and embed via create_message/2. You should probably consult the Embed Limits page."},{"ref":"Crux.Rest.html#t:execute_webhook_options/0","title":"Crux.Rest.execute_webhook_options/0","type":"type","doc":"Used for sending discord webhooks. For more information on non-discord webhooks, check Slack Docs or Github Docs"},{"ref":"Crux.Rest.html#t:get_current_user_guild_data/0","title":"Crux.Rest.get_current_user_guild_data/0","type":"type","doc":"Used to list the current user&#39;s guilds in c:get_current_user_guild/1."},{"ref":"Crux.Rest.html#t:get_messages_data/0","title":"Crux.Rest.get_messages_data/0","type":"type","doc":"Used to get messages from the api via get_messages/2. Notes: :around is inclusive :before and :after are exclusive :limit has to be [1-100], defaults to 50"},{"ref":"Crux.Rest.html#t:get_reactions_data/0","title":"Crux.Rest.get_reactions_data/0","type":"type","doc":"Used to get more specific users who reacted to a message from the api via get_reactions/4 Notes: :before seems currently broken on discord&#39;s end :after is exclusive"},{"ref":"Crux.Rest.html#t:guild_role_data/0","title":"Crux.Rest.guild_role_data/0","type":"type","doc":"Used to create a role in a guild with create_guild_role/2."},{"ref":"Crux.Rest.html#t:list_guild_members_options/0","title":"Crux.Rest.list_guild_members_options/0","type":"type","doc":"Used to list guild members via list_guild_members/2."},{"ref":"Crux.Rest.html#t:message_edit_data/0","title":"Crux.Rest.message_edit_data/0","type":"type","doc":"Used to edit messages via edit_message/2 or edit_message/3. The content my not exceed 2000 chars, this limit is enfored on discord&#39;s end."},{"ref":"Crux.Rest.html#t:modify_channel_data/0","title":"Crux.Rest.modify_channel_data/0","type":"type","doc":"Used to modify a channel via modify_channel/2. Notes :name has to be [2-100] chars long. :topic has to be [0-1024] chars long :bitrate is in bits [8_000-96_000] (128_000 for VIP servers) :user_limit has to be [0-99], 0 refers to no limit :rate_limit_per_user has to be [0-120], 0 refers to no limit For more informations see Discord Docs."},{"ref":"Crux.Rest.html#t:modify_current_user_data/0","title":"Crux.Rest.modify_current_user_data/0","type":"type","doc":"Used to modify the currently logged in modify_current_user/1."},{"ref":"Crux.Rest.html#t:modify_guild_channel_positions_data_entry/0","title":"Crux.Rest.modify_guild_channel_positions_data_entry/0","type":"type","doc":"Used to change a channel&#39;s position via modify_guild_channel_positions/2. Deprecated: Use Crux.Structs.Channel.position_resolvable() instead"},{"ref":"Crux.Rest.html#t:modify_guild_data/0","title":"Crux.Rest.modify_guild_data/0","type":"type","doc":"Used to modify a guild using modify_guild/2."},{"ref":"Crux.Rest.html#t:modify_guild_emoji_data/0","title":"Crux.Rest.modify_guild_emoji_data/0","type":"type","doc":"Used to modify a guild emoji via modify_guild_emoji/3. See Crux.Rest.create_guild_emoji_data/0 for name restrictions."},{"ref":"Crux.Rest.html#t:modify_guild_member_data/0","title":"Crux.Rest.modify_guild_member_data/0","type":"type","doc":"Used to modify a member with modify_guild_member/3. Notes: A nil :channel_id will kick the member from the voice channel."},{"ref":"Crux.Rest.html#t:options/0","title":"Crux.Rest.options/0","type":"type","doc":"Options used to start Crux.Rest."},{"ref":"Crux.Rest.html#t:snowflake/0","title":"Crux.Rest.snowflake/0","type":"type","doc":"A Discord snowflake, fits in a 64bit integer. Received as integers via the gateway, but as strings via http. They are normalized to integers via Crux.Structs. Deprecated: Use Crux.Snowflake.resolvable() instead"},{"ref":"Crux.Rest.ApiError.html","title":"Crux.Rest.ApiError","type":"exception","doc":"Represents a Discord API error. Raised or returned whenever the api responded with a non 2xx status code"},{"ref":"Crux.Rest.ApiError.html#exception/1","title":"Crux.Rest.ApiError.exception/1","type":"function","doc":"Default implementation only providing a message for raise/2"},{"ref":"Crux.Rest.ApiError.html#exception/2","title":"Crux.Rest.ApiError.exception/2","type":"function","doc":"Creates a full Crux.Rest.ApiError struct, returned / raised by all Crux.Rest functions in case of an API error."},{"ref":"Crux.Rest.ApiError.html#t:t/0","title":"Crux.Rest.ApiError.t/0","type":"type","doc":"PropertyDescriptionExample(s) status_codeHTTP status code400, 404, 403 codeSee Discord&#39;s JSON Error Codes10006, 90001 messageMessage describing the errorUnknown Invite pathPath of the request/invites/broken methodHTTP verb:get, :post, :patch"},{"ref":"Crux.Rest.CDN.html","title":"Crux.Rest.CDN","type":"module","doc":"Functions to generate cdn urls pointing to avatars, icons, etc."},{"ref":"Crux.Rest.CDN.html#base_url/0","title":"Crux.Rest.CDN.base_url/0","type":"function","doc":"Base CDN address."},{"ref":"Crux.Rest.CDN.html#custom_emoji/1","title":"Crux.Rest.CDN.custom_emoji/1","type":"function","doc":"Generates the url to an emoji. This function does not accept any format_options/0. # A struct iex&gt; %Crux.Structs.Emoji{id: 438226248293154816, animated: false} ...&gt; |&gt; Crux.Rest.CDN.custom_emoji() &quot;https://cdn.discordapp.com/emojis/438226248293154816.png&quot; # A plain map iex&gt; %{id: 438226248293154816, animated: true} ...&gt; |&gt; Crux.Rest.CDN.custom_emoji() &quot;https://cdn.discordapp.com/emojis/438226248293154816.gif&quot;"},{"ref":"Crux.Rest.CDN.html#default_user_avatar/1","title":"Crux.Rest.CDN.default_user_avatar/1","type":"function","doc":"Generates a url to the default avatar url of a user. # A struct iex&gt; %Crux.Structs.User{discriminator: &quot;0001&quot;} ...&gt; |&gt; Crux.Rest.CDN.default_user_avatar() &quot;https://cdn.discordapp.com/embed/avatars/1.png&quot; # A plain map iex&gt; %{discriminator: &quot;0001&quot;} ...&gt; |&gt; Crux.Rest.CDN.default_user_avatar() &quot;https://cdn.discordapp.com/embed/avatars/1.png&quot;"},{"ref":"Crux.Rest.CDN.html#group_dm_icon/2","title":"Crux.Rest.CDN.group_dm_icon/2","type":"function","doc":"Generates a url to group dm channel icon. If the group dm channel has no icon nil will be returned. # A struct iex&gt; %Crux.Structs.Channel{id: 354042501201526786, icon: &quot;ecd7839b9eed535f1ae3a545c5d5f3c8&quot;} ...&gt; |&gt; Crux.Rest.CDN.group_dm_icon() &quot;https://cdn.discordapp.com/channel-icons/354042501201526786/ecd7839b9eed535f1ae3a545c5d5f3c8.webp&quot; # A plain map iex&gt; %{id: 354042501201526786, icon: &quot;ecd7839b9eed535f1ae3a545c5d5f3c8&quot;} ...&gt; |&gt; Crux.Rest.CDN.group_dm_icon() &quot;https://cdn.discordapp.com/channel-icons/354042501201526786/ecd7839b9eed535f1ae3a545c5d5f3c8.webp&quot; # With format options iex&gt; %Crux.Structs.Channel{id: 354042501201526786, icon: &quot;ecd7839b9eed535f1ae3a545c5d5f3c8&quot;} ...&gt; |&gt; Crux.Rest.CDN.group_dm_icon(size: 16, extension: &quot;png&quot;) &quot;https://cdn.discordapp.com/channel-icons/354042501201526786/ecd7839b9eed535f1ae3a545c5d5f3c8.png?size=16&quot; # Without icon iex&gt; %{icon: nil} ...&gt; |&gt; Crux.Rest.CDN.group_dm_icon() nil"},{"ref":"Crux.Rest.CDN.html#guild_banner/2","title":"Crux.Rest.CDN.guild_banner/2","type":"function","doc":"Generates a url to a guild banner. The extension &quot;gif&quot; is not valid here. # A struct iex&gt; %Crux.Structs.Guild{id: 269508806759809042, banner: &quot;29c1980a3471cb2d5c1208c5196278fb&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_banner() &quot;https://cdn.discordapp.com/banners/269508806759809042/29c1980a3471cb2d5c1208c5196278fb.webp&quot; # A plain map iex&gt; %{id: 269508806759809042, banner: &quot;29c1980a3471cb2d5c1208c5196278fb&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_banner() &quot;https://cdn.discordapp.com/banners/269508806759809042/29c1980a3471cb2d5c1208c5196278fb.webp&quot; # With format_options iex&gt; %Crux.Structs.Guild{id: 269508806759809042, banner: &quot;29c1980a3471cb2d5c1208c5196278fb&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_banner(size: 16, extension: &quot;png&quot;) &quot;https://cdn.discordapp.com/banners/269508806759809042/29c1980a3471cb2d5c1208c5196278fb.png?size=16&quot; # Without banner iex&gt; %Crux.Structs.Guild{id: 269508806759809042, banner: nil} ...&gt; |&gt; Crux.Rest.CDN.guild_banner() nil"},{"ref":"Crux.Rest.CDN.html#guild_icon/2","title":"Crux.Rest.CDN.guild_icon/2","type":"function","doc":"Generates a url to a guild icon. If the guild has no icon nil will be returned. The extension &quot;gif&quot; is not valid here. # A guild struct iex&gt; %Crux.Structs.Guild{id: 269508806759809042, icon: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_icon() &quot;https://cdn.discordapp.com/icons/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.webp&quot; # A plain map iex&gt; %{id: 269508806759809042, icon: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_icon() &quot;https://cdn.discordapp.com/icons/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.webp&quot; # With format_options iex&gt; %Crux.Structs.Guild{id: 269508806759809042, icon: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_icon(size: 16, extension: &quot;png&quot;) &quot;https://cdn.discordapp.com/icons/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.png?size=16&quot; # Without icon iex&gt; %Crux.Structs.Guild{id: 269508806759809042, icon: nil} ...&gt; |&gt; Crux.Rest.CDN.guild_icon() nil"},{"ref":"Crux.Rest.CDN.html#guild_splash/2","title":"Crux.Rest.CDN.guild_splash/2","type":"function","doc":"Generates a url to a guild splash. The extension &quot;gif&quot; is not valid here. # A struct iex&gt; %Crux.Structs.Guild{id: 269508806759809042, splash: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_splash() &quot;https://cdn.discordapp.com/splashes/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.webp&quot; # A plain map iex&gt; %{id: 269508806759809042, splash: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_splash() &quot;https://cdn.discordapp.com/splashes/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.webp&quot; # With format_options iex&gt; %Crux.Structs.Guild{id: 269508806759809042, splash: &quot;15abb45cf1c59f90ea291185b99ab1dd&quot;} ...&gt; |&gt; Crux.Rest.CDN.guild_splash(size: 16, extension: &quot;png&quot;) &quot;https://cdn.discordapp.com/splashes/269508806759809042/15abb45cf1c59f90ea291185b99ab1dd.png?size=16&quot; # Without splash iex&gt; %Crux.Structs.Guild{id: 269508806759809042, splash: nil} ...&gt; |&gt; Crux.Rest.CDN.guild_splash() nil"},{"ref":"Crux.Rest.CDN.html#user_avatar/2","title":"Crux.Rest.CDN.user_avatar/2","type":"function","doc":"Generates a url to a user. If the user has no custom avatar this will return a default one with the extension &quot;webp&quot;. The extension defaults to &quot;gif&quot; or &quot;webp&quot; depending on whether the user has an animated avatar. # A struct with an avatar iex&gt; %Crux.Structs.User{id: 218348062828003328, avatar: &quot;646a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Rest.CDN.user_avatar() &quot;https://cdn.discordapp.com/avatars/218348062828003328/646a356e237350bf8b8dfde15667dfc4.webp&quot; # A plain map with an avatar iex&gt; %{id: 218348062828003328, avatar: &quot;646a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Rest.CDN.user_avatar() &quot;https://cdn.discordapp.com/avatars/218348062828003328/646a356e237350bf8b8dfde15667dfc4.webp&quot; # With format options iex&gt; %Crux.Structs.User{id: 218348062828003328, avatar: &quot;646a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Rest.CDN.user_avatar(extension: &quot;png&quot;, size: 2048) &quot;https://cdn.discordapp.com/avatars/218348062828003328/646a356e237350bf8b8dfde15667dfc4.png?size=2048&quot; # A struct without an avatar iex&gt; %Crux.Structs.User{id: 218348062828003328, avatar: nil, discriminator: &quot;0001&quot;} ...&gt; |&gt; Crux.Rest.CDN.user_avatar() &quot;https://cdn.discordapp.com/embed/avatars/1.png&quot;"},{"ref":"Crux.Rest.CDN.html#t:format_options/0","title":"Crux.Rest.CDN.format_options/0","type":"type","doc":"Specifies the file type / extension and size of the resource url to generate. Notes: :size has to be any power of two between 16 and 2048 :extension has to be one of &quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;, &quot;webp&quot;, &quot;gif&quot; See the docs of each function for information what sizes / extensions are valid there."},{"ref":"Crux.Rest.Endpoints.html","title":"Crux.Rest.Endpoints","type":"module","doc":"Endpoints being used by the Crux.Rest module, you do not need to worry about it."},{"ref":"Crux.Rest.Endpoints.html#base_url/0","title":"Crux.Rest.Endpoints.base_url/0","type":"function","doc":"Base API address."},{"ref":"Crux.Rest.Endpoints.html#channel/2","title":"Crux.Rest.Endpoints.channel/2","type":"function","doc":"Used for channel related functions."},{"ref":"Crux.Rest.Endpoints.html#channel_invites/1","title":"Crux.Rest.Endpoints.channel_invites/1","type":"function","doc":"Used for channel invites."},{"ref":"Crux.Rest.Endpoints.html#channel_messages/2","title":"Crux.Rest.Endpoints.channel_messages/2","type":"function","doc":"Used for channel messages related functions."},{"ref":"Crux.Rest.Endpoints.html#channel_messages_bulk_delete/1","title":"Crux.Rest.Endpoints.channel_messages_bulk_delete/1","type":"function","doc":"Used for message deletion functions."},{"ref":"Crux.Rest.Endpoints.html#channel_permissions/2","title":"Crux.Rest.Endpoints.channel_permissions/2","type":"function","doc":"Used for channel permissions related functions."},{"ref":"Crux.Rest.Endpoints.html#channel_pins/2","title":"Crux.Rest.Endpoints.channel_pins/2","type":"function","doc":"Used for pin related functions."},{"ref":"Crux.Rest.Endpoints.html#channel_typing/1","title":"Crux.Rest.Endpoints.channel_typing/1","type":"function","doc":"Used for channel typing."},{"ref":"Crux.Rest.Endpoints.html#channel_webhooks/1","title":"Crux.Rest.Endpoints.channel_webhooks/1","type":"function","doc":"Used to fetch channel webhooks."},{"ref":"Crux.Rest.Endpoints.html#gateway/0","title":"Crux.Rest.Endpoints.gateway/0","type":"function","doc":"Used to obtain the gateway address."},{"ref":"Crux.Rest.Endpoints.html#gateway_bot/0","title":"Crux.Rest.Endpoints.gateway_bot/0","type":"function","doc":"Used to obtain the gateway address along the recommended shard count."},{"ref":"Crux.Rest.Endpoints.html#guild/2","title":"Crux.Rest.Endpoints.guild/2","type":"function","doc":"Used for guild related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_audit_logs/1","title":"Crux.Rest.Endpoints.guild_audit_logs/1","type":"function","doc":"Used for guild audit logs fetching."},{"ref":"Crux.Rest.Endpoints.html#guild_bans/2","title":"Crux.Rest.Endpoints.guild_bans/2","type":"function","doc":"Used for ban related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_channels/1","title":"Crux.Rest.Endpoints.guild_channels/1","type":"function","doc":"Used for guild channel functions."},{"ref":"Crux.Rest.Endpoints.html#guild_embed/1","title":"Crux.Rest.Endpoints.guild_embed/1","type":"function","doc":"Used for guild embed functions."},{"ref":"Crux.Rest.Endpoints.html#guild_emojis/2","title":"Crux.Rest.Endpoints.guild_emojis/2","type":"function","doc":"Used for guild emoji related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_integrations/2","title":"Crux.Rest.Endpoints.guild_integrations/2","type":"function","doc":"Used for integration related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_invites/1","title":"Crux.Rest.Endpoints.guild_invites/1","type":"function","doc":"Used for guild invites functions."},{"ref":"Crux.Rest.Endpoints.html#guild_member_roles/3","title":"Crux.Rest.Endpoints.guild_member_roles/3","type":"function","doc":"Used for role related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_members/2","title":"Crux.Rest.Endpoints.guild_members/2","type":"function","doc":"Used for guild members related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_own_nick/1","title":"Crux.Rest.Endpoints.guild_own_nick/1","type":"function","doc":"Discord being special."},{"ref":"Crux.Rest.Endpoints.html#guild_prune/1","title":"Crux.Rest.Endpoints.guild_prune/1","type":"function","doc":"Used for guild prune functions"},{"ref":"Crux.Rest.Endpoints.html#guild_regions/1","title":"Crux.Rest.Endpoints.guild_regions/1","type":"function","doc":"Used for guild region functions."},{"ref":"Crux.Rest.Endpoints.html#guild_roles/2","title":"Crux.Rest.Endpoints.guild_roles/2","type":"function","doc":"Used for role related functions."},{"ref":"Crux.Rest.Endpoints.html#guild_webhooks/1","title":"Crux.Rest.Endpoints.guild_webhooks/1","type":"function","doc":"Used to fetch guild webhooks."},{"ref":"Crux.Rest.Endpoints.html#invite/1","title":"Crux.Rest.Endpoints.invite/1","type":"function","doc":"Used for invite related functions."},{"ref":"Crux.Rest.Endpoints.html#me/1","title":"Crux.Rest.Endpoints.me/1","type":"function","doc":"Used for functions related to the current user."},{"ref":"Crux.Rest.Endpoints.html#me_channels/0","title":"Crux.Rest.Endpoints.me_channels/0","type":"function","doc":"Used for dm channel functions."},{"ref":"Crux.Rest.Endpoints.html#me_guilds/1","title":"Crux.Rest.Endpoints.me_guilds/1","type":"function","doc":"Used for functions related to the current user&#39;s guilds."},{"ref":"Crux.Rest.Endpoints.html#message_reactions/4","title":"Crux.Rest.Endpoints.message_reactions/4","type":"function","doc":"Used for reactions related functions."},{"ref":"Crux.Rest.Endpoints.html#users/1","title":"Crux.Rest.Endpoints.users/1","type":"function","doc":"Used for functions related to users."},{"ref":"Crux.Rest.Endpoints.html#webhook/2","title":"Crux.Rest.Endpoints.webhook/2","type":"function","doc":"Used for webhook related functions."},{"ref":"Crux.Rest.Endpoints.html#webhook_github/2","title":"Crux.Rest.Endpoints.webhook_github/2","type":"function","doc":"Used to send github formatted webhooks."},{"ref":"Crux.Rest.Endpoints.html#webhook_slack/2","title":"Crux.Rest.Endpoints.webhook_slack/2","type":"function","doc":"Used to send slack formatted webhooks."},{"ref":"Crux.Rest.Functions.html","title":"Crux.Rest.Functions","type":"module","doc":"Module with functions to create Crux.Rest.Request which can be executed. There are no bangified functions here as no requests to Discord are actually made. All functions return a Crux.Rest.Request. Parameters are as described in Crux.Rest behaviour."},{"ref":"Crux.Rest.Request.html","title":"Crux.Rest.Request","type":"module","doc":"Struct representing an executable request."},{"ref":"Crux.Rest.Request.html#t:method/0","title":"Crux.Rest.Request.method/0","type":"type","doc":""},{"ref":"Crux.Rest.Util.html","title":"Crux.Rest.Util","type":"module","doc":"Collection of util functions."},{"ref":"Crux.Rest.Util.html#optional_update_in_map/3","title":"Crux.Rest.Util.optional_update_in_map/3","type":"function","doc":"Updates a value in map with the given fun. Is a noop if key is not in map."},{"ref":"Crux.Rest.Util.html#resolve_channel_id/1","title":"Crux.Rest.Util.resolve_channel_id/1","type":"function","doc":"Resolves a channel_id_resolvable/0 into a channel id. Examples iex&gt; %Crux.Structs.Channel{id: 222079895583457280} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_id() 222079895583457280 iex&gt; %Crux.Structs.Message{channel_id: 222079895583457280} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_id() 222079895583457280 iex&gt; 222079895583457280 ...&gt; |&gt; Crux.Rest.Util.resolve_channel_id() 222079895583457280"},{"ref":"Crux.Rest.Util.html#resolve_channel_position/1","title":"Crux.Rest.Util.resolve_channel_position/1","type":"function","doc":"Resolves a channel_position_resolvable/0 into a channel position. Examples iex&gt; %Crux.Structs.Channel{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_position() %{id: 222079895583457280, position: 5} iex&gt; {%Crux.Structs.Channel{id: 222079895583457280}, 5} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_position() %{id: 222079895583457280, position: 5} iex&gt; {222079895583457280, 5} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_position() %{id: 222079895583457280, position: 5} iex&gt; %{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Rest.Util.resolve_channel_position() %{id: 222079895583457280, position: 5}"},{"ref":"Crux.Rest.Util.html#resolve_emoji_id/1","title":"Crux.Rest.Util.resolve_emoji_id/1","type":"function","doc":"Resolves a emoji_id_resolvable/0 into an emoji id. Examples iex&gt; %Crux.Structs.Emoji{id: 396521773216301056} ...&gt; |&gt; Crux.Rest.Util.resolve_emoji_id() 396521773216301056 iex&gt; %Crux.Structs.Reaction{emoji: %Crux.Structs.Emoji{id: 396521773216301056}} ...&gt; |&gt; Crux.Rest.Util.resolve_emoji_id() 396521773216301056 iex&gt; 396521773216301056 ...&gt; |&gt; Crux.Rest.Util.resolve_emoji_id() 396521773216301056"},{"ref":"Crux.Rest.Util.html#resolve_guild_id/1","title":"Crux.Rest.Util.resolve_guild_id/1","type":"function","doc":"Resolves a guild_id_resolvable/0 into a guild id. Examples iex&gt; %Crux.Structs.Guild{id: 222078108977594368} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_id() 222078108977594368 iex&gt; %Crux.Structs.Channel{guild_id: 222078108977594368} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_id() 222078108977594368 iex&gt; %Crux.Structs.Message{guild_id: 222078108977594368} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_id() 222078108977594368 iex&gt; 222078108977594368 ...&gt; |&gt; Crux.Rest.Util.resolve_guild_id() 222078108977594368"},{"ref":"Crux.Rest.Util.html#resolve_guild_role_position/1","title":"Crux.Rest.Util.resolve_guild_role_position/1","type":"function","doc":"Resolves a guild_role_position_resolvable/0 into a role position. Examples iex&gt; {%Crux.Structs.Role{id: 373405430589816834}, 5} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_role_position() %{id: 373405430589816834, position: 5} iex&gt; %{id: 373405430589816834, position: 5} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_role_position() %{id: 373405430589816834, position: 5} iex&gt; %{role: %Crux.Structs.Role{id: 373405430589816834}, position: 5} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_role_position() %{id: 373405430589816834, position: 5} iex&gt; {373405430589816834, 5} ...&gt; |&gt; Crux.Rest.Util.resolve_guild_role_position() %{id: 373405430589816834, position: 5}"},{"ref":"Crux.Rest.Util.html#resolve_image/2","title":"Crux.Rest.Util.resolve_image/2","type":"function","doc":"Used for functions resolving a image/0 into base64 image data urls."},{"ref":"Crux.Rest.Util.html#resolve_image_in_map/2","title":"Crux.Rest.Util.resolve_image_in_map/2","type":"function","doc":"Internally used to transform a image/0 within a map to a base64 image data urls."},{"ref":"Crux.Rest.Util.html#resolve_message_id/1","title":"Crux.Rest.Util.resolve_message_id/1","type":"function","doc":"Resolves a message_id_resolvable/0 into a message id. Examples iex&gt; %Crux.Structs.Message{id: 441568727302012928} ...&gt; |&gt; Crux.Rest.Util.resolve_message_id() 441568727302012928 iex&gt; 441568727302012928 ...&gt; |&gt; Crux.Rest.Util.resolve_message_id() 441568727302012928"},{"ref":"Crux.Rest.Util.html#resolve_multipart/1","title":"Crux.Rest.Util.resolve_multipart/1","type":"function","doc":"Internally used to transform Crux.Rest.execute_webhook_options/0 and Crux.Rest.create_message_data/0 to a tuple of {body, extra_headers}"},{"ref":"Crux.Rest.Util.html#resolve_overwrite_target/1","title":"Crux.Rest.Util.resolve_overwrite_target/1","type":"function","doc":"Resolves a t:overwrite_target_resolvabe/0 into an overwrite target. Examples iex&gt; %Crux.Structs.Overwrite{type: &quot;member&quot;, id: 218348062828003328} ...&gt; |&gt; Crux.Rest.Util.resolve_overwrite_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Rest.Util.resolve_overwrite_target() {&quot;role&quot;, 376146940762783746} iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Rest.Util.resolve_overwrite_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Rest.Util.resolve_overwrite_target() {&quot;member&quot;, 218348062828003328} iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Rest.Util.resolve_overwrite_target() {:unknown, 218348062828003328}"},{"ref":"Crux.Rest.Util.html#resolve_role_id/1","title":"Crux.Rest.Util.resolve_role_id/1","type":"function","doc":"Resolves a role_id_resolvable/0 into a role id. Examples # A role struct iex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Rest.Util.resolve_role_id() 376146940762783746 # A role id iex&gt; 376146940762783746 ...&gt; |&gt; Crux.Rest.Util.resolve_role_id() 376146940762783746"},{"ref":"Crux.Rest.Util.html#resolve_user_id/1","title":"Crux.Rest.Util.resolve_user_id/1","type":"function","doc":"Resolves a user_id_resolvable/0 into a user id. Examples iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Rest.Util.resolve_user_id() 218348062828003328 iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Rest.Util.resolve_user_id() 218348062828003328 iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Rest.Util.resolve_user_id() 218348062828003328"},{"ref":"Crux.Rest.Util.html#t:attachment/0","title":"Crux.Rest.Util.attachment/0","type":"type","doc":"Used to attach files via Crux.Rest.create_message/2 or Crux.Rest.execute_webhook/3. This can be one of: Example binary&lt;&lt;0, 0, 0, 0&gt;&gt; (will be named &quot;file.jpg&quot;) {binary, name}{&lt;&lt;104, 101, 108, 108, 111&gt;&gt;, &quot;hello.txt&quot;}"},{"ref":"Crux.Rest.Util.html#t:channel_id_resolvable/0","title":"Crux.Rest.Util.channel_id_resolvable/0","type":"type","doc":"All available types that can be resolved into a channel id. Deprecated: Use Crux.Structs.CHannel.id_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:channel_position_resolvable/0","title":"Crux.Rest.Util.channel_position_resolvable/0","type":"type","doc":"All available types that can be resolved into a channel position. Deprecated: Use Crux.Structs.Channel.position_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:emoji_id_resolvable/0","title":"Crux.Rest.Util.emoji_id_resolvable/0","type":"type","doc":"All available types that can be resolved into an emoji id. Deprecated: Use Crux.Structs.Emoji.id_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:emoji_identifier_resolvable/0","title":"Crux.Rest.Util.emoji_identifier_resolvable/0","type":"type","doc":"All available types that can be resolved into an emoji identifier. Deprecated: Use Crux.Structs.Emoji.identifier_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:guild_id_resolvable/0","title":"Crux.Rest.Util.guild_id_resolvable/0","type":"type","doc":"All available types that can be resolved into a guild id. Deprecated: Use Crux.Structs.Guild.id_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:guild_role_position_resolvable/0","title":"Crux.Rest.Util.guild_role_position_resolvable/0","type":"type","doc":"All available types which can be resolved into a role position. Deprecated: Use Crux.Structs.Role.position_resolvable() instead."},{"ref":"Crux.Rest.Util.html#t:image/0","title":"Crux.Rest.Util.image/0","type":"type","doc":"Used for functions setting an icon / image / etc. Can be either a binary() of an image or a data url."},{"ref":"Crux.Rest.Util.html#t:message_id_resolvable/0","title":"Crux.Rest.Util.message_id_resolvable/0","type":"type","doc":"All available types that can be resolved into a message id. Deprecated: Use Crux.Structs.Message.id_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:overwrite_target_resolvable/0","title":"Crux.Rest.Util.overwrite_target_resolvable/0","type":"type","doc":"All available types that can be resolved into a target for a permission overwrite. Deprecated: Use Crux.Structs.Overwrite.target_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:role_id_resolvable/0","title":"Crux.Rest.Util.role_id_resolvable/0","type":"type","doc":"All available types that can be resolved into a role id. Deprecated: Use Crux.Structs.Role.id_resolvable() instead"},{"ref":"Crux.Rest.Util.html#t:user_id_resolvable/0","title":"Crux.Rest.Util.user_id_resolvable/0","type":"type","doc":"All available types that can be resolved into a user id. Deprecated: Use Crux.Structs.User.id_resolvable() instead"},{"ref":"Crux.Structs.html","title":"Crux.Structs","type":"behaviour","doc":"Provides a unified function to create one or a list of structs, invoking their create/1 function if available."},{"ref":"Crux.Structs.html#c:create/1","title":"Crux.Structs.create/1","type":"callback","doc":"Can be implemented by structs to transform the inital data."},{"ref":"Crux.Structs.html#create/2","title":"Crux.Structs.create/2","type":"function","doc":"Creates a struct or a list of structs invoking their create/1 function if available. Examples # A single member iex&gt; %{ ...&gt; &quot;nick&quot; =&gt; &quot;nick&quot;, ...&gt; &quot;user&quot; =&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;646a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; &quot;roles&quot; =&gt; [&quot;251158405832638465&quot;, &quot;373405430589816834&quot;], ...&gt; &quot;mute&quot; =&gt; false, ...&gt; &quot;deaf&quot; =&gt; false, ...&gt; &quot;joined_at&quot; =&gt; &quot;2016-11-02T00:51:21.342000+00:00&quot; ...&gt; } ...&gt; |&gt; Crux.Structs.create(Crux.Structs.Member) %Crux.Structs.Member{ nick: &quot;nick&quot;, user: 218348062828003328, roles: MapSet.new([251158405832638465, 373405430589816834]), mute: false, deaf: false, joined_at: &quot;2016-11-02T00:51:21.342000+00:00&quot;, guild_id: nil } # A single user iex&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Structs.create(Crux.Structs.User) %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;} # Multiple users iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.create(Crux.Structs.User) [ %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, %Crux.Structs.User{username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ] # Does not alter already structs iex&gt; Crux.Structs.create( ...&gt; %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; Crux.Structs.User ...&gt; ) %Crux.Structs.User{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;} # Fallback iex&gt; Crux.Structs.create(nil, nil) nil"},{"ref":"Crux.Structs.html#c:resolve_id/1","title":"Crux.Structs.resolve_id/1","type":"callback","doc":"Can be implemented by structs to provide a mechanism to resolve their id."},{"ref":"Crux.Structs.html#resolve_id/2","title":"Crux.Structs.resolve_id/2","type":"function","doc":"Resolves the id of a struct invoking their resolve_id/1 function if available. # Struct of the concrete type iex&gt; %Crux.Structs.Webhook{id: 618733351624507394} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Webhook) 618733351624507394 # Already snowflake iex&gt; 222089067028807682 ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Role) 222089067028807682 # Snowflake string iex&gt; &quot;222079895583457280&quot; ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Channel) 222079895583457280 # nil iex&gt; nil ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Guild) nil # Inexact type that is a resolvable iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.User) 218348062828003328 # Incorrect type iex&gt; %Crux.Structs.Role{id: 222079439876390922} ...&gt; |&gt; Crux.Structs.resolve_id(Crux.Structs.Emoji) nil"},{"ref":"Crux.Structs.Attachment.html","title":"Crux.Structs.Attachment","type":"module","doc":"Represents a Discord Attachment Object Height and width are only present for images."},{"ref":"Crux.Structs.Attachment.html#create/1","title":"Crux.Structs.Attachment.create/1","type":"function","doc":"Creates a Crux.Structs.Attachment.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Attachment.html#t:t/0","title":"Crux.Structs.Attachment.t/0","type":"type","doc":""},{"ref":"Crux.Structs.AuditLog.html","title":"Crux.Structs.AuditLog","type":"module","doc":"Represents a Discord Audit Log Object"},{"ref":"Crux.Structs.AuditLog.html#create/1","title":"Crux.Structs.AuditLog.create/1","type":"function","doc":"Creates a Crux.Structs.AuditLog.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.AuditLog.html#t:id_resolvable/0","title":"Crux.Structs.AuditLog.id_resolvable/0","type":"type","doc":"All available types that can be resolved into an audit log id."},{"ref":"Crux.Structs.AuditLog.html#t:t/0","title":"Crux.Structs.AuditLog.t/0","type":"type","doc":""},{"ref":"Crux.Structs.AuditLogChange.html","title":"Crux.Structs.AuditLogChange","type":"module","doc":"Represents a Discord Audit Log Change Object"},{"ref":"Crux.Structs.AuditLogChange.html#create/1","title":"Crux.Structs.AuditLogChange.create/1","type":"function","doc":"Creates a Crux.Structs.AuditLogChange.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.AuditLogChange.html#t:audit_log_change_value/0","title":"Crux.Structs.AuditLogChange.audit_log_change_value/0","type":"type","doc":"Represents a value before or after a change. Note that the Role object returned by Discord in audit logs is a partial role that only contains id and name."},{"ref":"Crux.Structs.AuditLogChange.html#t:t/0","title":"Crux.Structs.AuditLogChange.t/0","type":"type","doc":""},{"ref":"Crux.Structs.AuditLogEntry.html","title":"Crux.Structs.AuditLogEntry","type":"module","doc":"Represents a Discord Audit Log Object"},{"ref":"Crux.Structs.AuditLogEntry.html#create/1","title":"Crux.Structs.AuditLogEntry.create/1","type":"function","doc":"Creates a Crux.Structs.AuditLogEntry.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.AuditLogEntry.html#event_name/1","title":"Crux.Structs.AuditLogEntry.event_name/1","type":"function","doc":"Gets the event name from the action type id"},{"ref":"Crux.Structs.AuditLogEntry.html#events/0","title":"Crux.Structs.AuditLogEntry.events/0","type":"function","doc":"Returns a map of all audit log event names with their id"},{"ref":"Crux.Structs.AuditLogEntry.html#t:event_name/0","title":"Crux.Structs.AuditLogEntry.event_name/0","type":"type","doc":"Union type of audit log event name atoms."},{"ref":"Crux.Structs.AuditLogEntry.html#t:t/0","title":"Crux.Structs.AuditLogEntry.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Channel.html","title":"Crux.Structs.Channel","type":"module","doc":"Represents a Discord Channel Object. List of where every property can be present: PropertyText (0)DM (1)Voice (2)Group (3)Category (4)News (5) application_idnononoyesnono bitratenonoyesnonono guild_idyesnoyesnoyesyes iconnononoyesnono idyesyesyesyesyesyes last_message_idyesyesnoyesnoyes last_pin_timestampyesyesnoyesnoyes nameyesnoyesyesyesyes nsfwyesnonononoyes owner_idnononoyesnono parent_idyesnoyesnonoyes permission_overwritesyesnoyesnoyesyes positionyesnoyesnoyesyes rate_limit_per_useryesnonononono recipientsnoyes(One Element)noyesnono topicyesnoyesnoyesyes type012345 user_limitnonoyesnonono Differences opposed to the Discord API Object: :recipients is a MapSet of user ids"},{"ref":"Crux.Structs.Channel.html#create/1","title":"Crux.Structs.Channel.create/1","type":"function","doc":"Creates a Crux.Structs.Channel.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2"},{"ref":"Crux.Structs.Channel.html#resolve_id/1","title":"Crux.Structs.Channel.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Channel.t/0. Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Message{channel_id: 222079895583457280} ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; %Crux.Structs.Channel{id: 222079895583457280} ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; 222079895583457280 ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280 iex&gt; &quot;222079895583457280&quot; ...&gt; |&gt; Crux.Structs.Channel.resolve_id() 222079895583457280"},{"ref":"Crux.Structs.Channel.html#resolve_position/1","title":"Crux.Structs.Channel.resolve_position/1","type":"function","doc":"Resolves a position_resolvable/0 into a channel position. Examples iex&gt; %Crux.Structs.Channel{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {%Crux.Structs.Channel{id: 222079895583457280}, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {222079895583457280, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; %{id: 222079895583457280, position: 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() %{id: 222079895583457280, position: 5} iex&gt; {nil, 5} ...&gt; |&gt; Crux.Structs.Channel.resolve_position() nil"},{"ref":"Crux.Structs.Channel.html#to_mention/1","title":"Crux.Structs.Channel.to_mention/1","type":"function","doc":"Converts a Crux.Structs.Channel.t/0 into its discord mention format. Example iex&gt; %Crux.Structs.Channel{id: 316880197314019329} ...&gt; |&gt; Crux.Structs.Channel.to_mention() &quot;&lt;#316880197314019329&gt;&quot;"},{"ref":"Crux.Structs.Channel.html#t:id_resolvable/0","title":"Crux.Structs.Channel.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a channel id."},{"ref":"Crux.Structs.Channel.html#t:position_resolvable/0","title":"Crux.Structs.Channel.position_resolvable/0","type":"type","doc":"All available types that can be resolved into a channel position."},{"ref":"Crux.Structs.Channel.html#t:t/0","title":"Crux.Structs.Channel.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Embed.html","title":"Crux.Structs.Embed","type":"module","doc":"Represents a Discord Embed Object. Every property except type is optional, and thus may have default value."},{"ref":"Crux.Structs.Embed.html#t:t/0","title":"Crux.Structs.Embed.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Emoji.html","title":"Crux.Structs.Emoji","type":"module","doc":"Represents a Discord Emoji Object. Differences opposed to the Discord API Object: :user is just the user id"},{"ref":"Crux.Structs.Emoji.html#create/1","title":"Crux.Structs.Emoji.create/1","type":"function","doc":"Creates a Crux.Structs.Emoji.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Emoji.html#resolve_id/1","title":"Crux.Structs.Emoji.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Emoji.t/0. Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Emoji{id: 618731477143912448} ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; %Crux.Structs.Reaction{emoji: %Crux.Structs.Emoji{id: 618731477143912448}} ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; 618731477143912448 ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448 iex&gt; &quot;618731477143912448&quot; ...&gt; |&gt; Crux.Structs.Emoji.resolve_id() 618731477143912448"},{"ref":"Crux.Structs.Emoji.html#to_identifier/1","title":"Crux.Structs.Emoji.to_identifier/1","type":"function","doc":"Converts an Crux.Structs.Emoji.t/0, a Crux.Structs.Reaction.t/0, or a String.t/0 to its discord identifier format. &gt; This is automatically done if using a appropriate rest function. Examples # A custom emoji iex&gt; %Crux.Structs.Emoji{animated: false, id: 396521773216301056, name: &quot;blobwavereverse&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;blobwavereverse:396521773216301056&quot; # A custom animated emoji iex&gt; %Crux.Structs.Emoji{animated: true, id: 396521774466203659, name: &quot;ablobwavereverse&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;a:ablobwavereverse:396521774466203659&quot; # A regular emoji iex&gt; %Crux.Structs.Emoji{animated: false, id: nil, name: &quot;👋&quot;} ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;%F0%9F%91%8B&quot; # A reaction struct iex&gt; %Crux.Structs.Reaction{ ...&gt; emoji: %Crux.Structs.Emoji{animated: false, id: 356830260626456586, name: &quot;blobReach&quot;} ...&gt; } ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;blobReach:356830260626456586&quot; # An already encoded identifier iex&gt; &quot;👀&quot; ...&gt; |&gt; URI.encode_www_form() ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;%F0%9F%91%80&quot; # A custom emoji&#39;s identifier iex&gt; &quot;eyesRight:271412698267254784&quot; ...&gt; |&gt; Crux.Structs.Emoji.to_identifier() &quot;eyesRight:271412698267254784&quot;"},{"ref":"Crux.Structs.Emoji.html#t:id_resolvable/0","title":"Crux.Structs.Emoji.id_resolvable/0","type":"type","doc":"All available types that can be resolved into an emoji id."},{"ref":"Crux.Structs.Emoji.html#t:identifier_resolvable/0","title":"Crux.Structs.Emoji.identifier_resolvable/0","type":"type","doc":"All available types that can be resolved into a discord emoji identifier. String.t() stands for an already encoded unicode emoji."},{"ref":"Crux.Structs.Emoji.html#t:t/0","title":"Crux.Structs.Emoji.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Guild.html","title":"Crux.Structs.Guild","type":"module","doc":"Represents a Discord Guild Object. Differences opposed to the Discord API Object: :channels is a MapSet of channel ids :emojis is a MapSet of emoji ids :presences does not exists at all"},{"ref":"Crux.Structs.Guild.html#create/1","title":"Crux.Structs.Guild.create/1","type":"function","doc":"Creates a t:Crux.Structs.Guild/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Guild.html#resolve_id/1","title":"Crux.Structs.Guild.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Guild.t/0. Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Guild{id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; %Crux.Structs.Channel{guild_id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; %Crux.Structs.Message{guild_id: 516569101267894284} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; 516569101267894284 ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 iex&gt; &quot;516569101267894284&quot; ...&gt; |&gt; Crux.Structs.Guild.resolve_id() 516569101267894284 # DMs iex&gt; %Crux.Structs.Channel{guild_id: nil} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() nil iex&gt; %Crux.Structs.Message{guild_id: nil} ...&gt; |&gt; Crux.Structs.Guild.resolve_id() nil"},{"ref":"Crux.Structs.Guild.html#t:id_resolvable/0","title":"Crux.Structs.Guild.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a guild id."},{"ref":"Crux.Structs.Guild.html#t:t/0","title":"Crux.Structs.Guild.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Invite.html","title":"Crux.Structs.Invite","type":"module","doc":"Represents a Discord Invite Object List of what property can be present fetched with what function: PropertyRest.get_invite/1Rest.create_channel_invite/1Rest.delete_invite/1 Rest.get_channel_invites/1 Rest.get_guild_invites/1 codeyesyesyes guildif not group dmif not group dmif not group dm channelyesyesyes inviteryesyesyes usesnoyesno max_usesnoyesno max_agenoyesno temporarynoyesno created_atnoyesno revokednonono approximate_presence_countyesnono approximate_member_countyesnono Notes: :guild only has:verification_level, :features, :name, :splash, :id, and :icon. :channel only has :type, :id and :name. You can, if applicable, fetch the full structs from cache."},{"ref":"Crux.Structs.Invite.html#create/1","title":"Crux.Structs.Invite.create/1","type":"function","doc":"Creates a Crux.Structs.Invite.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Invite.html#t:t/0","title":"Crux.Structs.Invite.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Member.html","title":"Crux.Structs.Member","type":"module","doc":"Represents a Discord Guild Member Object. Differences opposed to the Discord API Object: :user is just the user id"},{"ref":"Crux.Structs.Member.html#create/1","title":"Crux.Structs.Member.create/1","type":"function","doc":"Creates a Crux.Structs.Member.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Member.html#resolve_id/1","title":"Crux.Structs.Member.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Member.t/0. Automatically invoked by Crux.Structs.resolve_id/2. For examples see Crux.Structs.User.resolve_id/1."},{"ref":"Crux.Structs.Member.html#to_mention/1","title":"Crux.Structs.Member.to_mention/1","type":"function","doc":"Converts a Crux.Structs.Member.t/0 into its discord mention format. Examples # Without nickname iex&gt; %Crux.Structs.Member{user: 218348062828003328, nick: nil} ...&gt; |&gt; Crux.Structs.Member.to_mention() &quot;&lt;@218348062828003328&gt;&quot; # With nickname iex&gt; %Crux.Structs.Member{user: 218348062828003328, nick: &quot;weltraum&quot;} ...&gt; |&gt; Crux.Structs.Member.to_mention() &quot;&lt;@!218348062828003328&gt;&quot;"},{"ref":"Crux.Structs.Member.html#t:id_resolvable/0","title":"Crux.Structs.Member.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a user id."},{"ref":"Crux.Structs.Member.html#t:t/0","title":"Crux.Structs.Member.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Message.html","title":"Crux.Structs.Message","type":"module","doc":"Represents a Discord Message Object. Differences opposed to the Discord API Object: :mentions is a MapSet of user ids"},{"ref":"Crux.Structs.Message.html#create/1","title":"Crux.Structs.Message.create/1","type":"function","doc":"Creates a Crux.Structs.Message.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Message.html#t:id_resolvable/0","title":"Crux.Structs.Message.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a message id."},{"ref":"Crux.Structs.Message.html#t:mention_channel/0","title":"Crux.Structs.Message.mention_channel/0","type":"type","doc":""},{"ref":"Crux.Structs.Message.html#t:message_activity/0","title":"Crux.Structs.Message.message_activity/0","type":"type","doc":""},{"ref":"Crux.Structs.Message.html#t:message_application/0","title":"Crux.Structs.Message.message_application/0","type":"type","doc":""},{"ref":"Crux.Structs.Message.html#t:message_reference/0","title":"Crux.Structs.Message.message_reference/0","type":"type","doc":"message_id is nil for the initial message sent when a user starts following a channel. guild_id is only nil for some messages during the initial rollout of this feature."},{"ref":"Crux.Structs.Message.html#t:t/0","title":"Crux.Structs.Message.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Overwrite.html","title":"Crux.Structs.Overwrite","type":"module","doc":"Represents a Discord Overwrite Object."},{"ref":"Crux.Structs.Overwrite.html#create/1","title":"Crux.Structs.Overwrite.create/1","type":"function","doc":"Creates a Crux.Structs.Overwrite.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Overwrite.html#resolve_target/1","title":"Crux.Structs.Overwrite.resolve_target/1","type":"function","doc":"Resolves a target_resolvable/0 into an overwrite target. Note that an id or string of it returns :unknown as type. Examples iex&gt; %Crux.Structs.Overwrite{type: &quot;member&quot;, id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;role&quot;, 376146940762783746} iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.Message{author: %Crux.Structs.User{id: 218348062828003328}} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;member&quot;, 218348062828003328} iex&gt; %Crux.Structs.VoiceState{user_id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {&quot;member&quot;, 218348062828003328} iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {:unknown, 218348062828003328} iex&gt; &quot;218348062828003328&quot; ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() {:unknown, 218348062828003328} iex&gt; nil ...&gt; |&gt; Crux.Structs.Overwrite.resolve_target() nil"},{"ref":"Crux.Structs.Overwrite.html#t:t/0","title":"Crux.Structs.Overwrite.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Overwrite.html#t:target_resolvable/0","title":"Crux.Structs.Overwrite.target_resolvable/0","type":"type","doc":"All available types that can be resolved into a target for a permission overwrite"},{"ref":"Crux.Structs.Permissions.html","title":"Crux.Structs.Permissions","type":"module","doc":"Custom non discord api struct to help with working with permissions. For more informations see Discord Docs."},{"ref":"Crux.Structs.Permissions.html#add/2","title":"Crux.Structs.Permissions.add/2","type":"function","doc":"Adds permissions to the base permissions. Examples iex&gt; :administrator ...&gt; |&gt; Crux.Structs.Permissions.add(:manage_guild) %Crux.Structs.Permissions{bitfield: 0x28}"},{"ref":"Crux.Structs.Permissions.html#all/0","title":"Crux.Structs.Permissions.all/0","type":"function","doc":"Returns the integer value of all permissions summed up."},{"ref":"Crux.Structs.Permissions.html#explicit/3","title":"Crux.Structs.Permissions.explicit/3","type":"function","doc":"Resolves permissions for a user in a guild, optionally including channel permission overwrites. Raises when the member is not cached. The administrator flag or being owner implicitly does not grant permissions, see implicit/3."},{"ref":"Crux.Structs.Permissions.html#flags/0","title":"Crux.Structs.Permissions.flags/0","type":"function","doc":"Returns a map of all permissions."},{"ref":"Crux.Structs.Permissions.html#has/2","title":"Crux.Structs.Permissions.has/2","type":"function","doc":"Check whether the second permissions are all present in the first. Examples # Administrator won&#39;t grant any other permissions iex&gt; Crux.Structs.Permissions.has(0x8, Crux.Structs.Permissions.all()) false # Resolving a list of `permissions_name`s iex&gt; Crux.Structs.Permissions.has([:send_messages, :view_channel, :read_message_history], [:send_messages, :view_channel]) true # Resolving different types of `permissions`s iex&gt; Crux.Structs.Permissions.has(:administrator, 0x8) true # In different order iex&gt; Crux.Structs.Permissions.has(0x8, :administrator) true"},{"ref":"Crux.Structs.Permissions.html#implicit/3","title":"Crux.Structs.Permissions.implicit/3","type":"function","doc":"Resolves permissions for a user in a guild, optionally including channel permission overwrites. Raises when the member is not cached. The guild-wide administrator flag or being owner implicitly grants all permissions, see explicit/3."},{"ref":"Crux.Structs.Permissions.html#missing/2","title":"Crux.Structs.Permissions.missing/2","type":"function","doc":"Similar to has/2 but returns a Crux.Structs.Permissions.t/0 of the missing permissions. Examples iex&gt; Crux.Structs.Permissions.missing([:send_messages, :view_channel], [:send_messages, :view_channel, :embed_links]) %Crux.Structs.Permissions{bitfield: 0x4000} # Administrator won&#39;t implicilty grant other permissions iex&gt; Crux.Structs.Permissions.missing([:administrator], [:send_messages]) %Crux.Structs.Permissions{bitfield: 0x800} # Everything set iex&gt; Crux.Structs.Permissions.missing([:kick_members, :ban_members, :view_audit_log], [:kick_members, :ban_members]) %Crux.Structs.Permissions{bitfield: 0} # No permissions iex&gt; Crux.Structs.Permissions.missing([:send_messages, :view_channel], []) %Crux.Structs.Permissions{bitfield: 0}"},{"ref":"Crux.Structs.Permissions.html#names/0","title":"Crux.Structs.Permissions.names/0","type":"function","doc":"Returns a list of all permission keys."},{"ref":"Crux.Structs.Permissions.html#new/1","title":"Crux.Structs.Permissions.new/1","type":"function","doc":"Creates a new Crux.Structs.Permissions.t/0 from a valid resolvable/0."},{"ref":"Crux.Structs.Permissions.html#remove/2","title":"Crux.Structs.Permissions.remove/2","type":"function","doc":"Removes permissions from the base permissions Examples iex&gt; [0x8, 0x10, 0x20] ...&gt; |&gt; Crux.Structs.Permissions.remove([0x10, 0x20]) %Crux.Structs.Permissions{bitfield: 0x8}"},{"ref":"Crux.Structs.Permissions.html#resolve/1","title":"Crux.Structs.Permissions.resolve/1","type":"function","doc":"Resolves a resolvable/0 into a bitfield representing the set permissions. Examples # A single bitflag iex&gt; 0x8 ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0x8 # A single name iex&gt; :administrator ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0x8 # A list of bitflags iex&gt; [0x8, 0x4] ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0xC # A list of names iex&gt; [:administrator, :ban_members] ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0xC # A mixture of both iex&gt; [:manage_roles, 0x400, 0x800, :add_reactions] ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0x10000C40 # An empty list iex&gt; [] ...&gt; |&gt; Crux.Structs.Permissions.resolve() 0x0"},{"ref":"Crux.Structs.Permissions.html#to_list/1","title":"Crux.Structs.Permissions.to_list/1","type":"function","doc":"Serializes permissions into a list of set name/0s. Examples iex&gt; 0x30 ...&gt; |&gt; Crux.Structs.Permissions.to_list() [:manage_guild, :manage_channels]"},{"ref":"Crux.Structs.Permissions.html#to_map/1","title":"Crux.Structs.Permissions.to_map/1","type":"function","doc":"Serializes permissions into a map keyed by name/0 with a boolean indicating whether the permission is set."},{"ref":"Crux.Structs.Permissions.html#t:name/0","title":"Crux.Structs.Permissions.name/0","type":"type","doc":"Union type of all valid permission name atoms."},{"ref":"Crux.Structs.Permissions.html#t:resolvable/0","title":"Crux.Structs.Permissions.resolvable/0","type":"type","doc":"All valid types which can be directly resolved into a permissions bitfield."},{"ref":"Crux.Structs.Permissions.html#t:t/0","title":"Crux.Structs.Permissions.t/0","type":"type","doc":"Represents a Crux.Structs.Permissions.t/0. :bitfield: The raw bitfield of permission flags."},{"ref":"Crux.Structs.Presence.html","title":"Crux.Structs.Presence","type":"module","doc":"Represents a Discord Presence Object. Differences opposed to the Discord API Object: :user is just the user id"},{"ref":"Crux.Structs.Presence.html#create/1","title":"Crux.Structs.Presence.create/1","type":"function","doc":"Creates a Crux.Structs.Presence.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Presence.html#resolve_id/1","title":"Crux.Structs.Presence.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Presence.t/0 Automatically invoked by Crux.Structs.resolve_id/2 For examples see Crux.Structs.User.resolve_id/1"},{"ref":"Crux.Structs.Presence.html#t:id_resolvable/0","title":"Crux.Structs.Presence.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a user id."},{"ref":"Crux.Structs.Presence.html#t:t/0","title":"Crux.Structs.Presence.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Reaction.html","title":"Crux.Structs.Reaction","type":"module","doc":"Represents a Discord Reaction Object."},{"ref":"Crux.Structs.Reaction.html#create/1","title":"Crux.Structs.Reaction.create/1","type":"function","doc":"Creates a Crux.Structs.Presence.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Reaction.html#resolve_id/1","title":"Crux.Structs.Reaction.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Reaction.t/0. Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.Reaction{emoji: %Crux.Structs.Emoji{id: 618731477143912448}} ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; %Crux.Structs.Emoji{id: 618731477143912448} ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; 618731477143912448 ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448 iex&gt; &quot;618731477143912448&quot; ...&gt; |&gt; Crux.Structs.Reaction.resolve_id() 618731477143912448"},{"ref":"Crux.Structs.Reaction.html#t:id_resolvable/0","title":"Crux.Structs.Reaction.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a reaction / emoji id."},{"ref":"Crux.Structs.Reaction.html#t:t/0","title":"Crux.Structs.Reaction.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Role.html","title":"Crux.Structs.Role","type":"module","doc":"Represents a Discord Role Object."},{"ref":"Crux.Structs.Role.html#create/1","title":"Crux.Structs.Role.create/1","type":"function","doc":"Creates a Crux.Structs.Role.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Role.html#resolve_position/1","title":"Crux.Structs.Role.resolve_position/1","type":"function","doc":"Resolves a position_resolvable/0 into a role position. Examples iex&gt; {%Crux.Structs.Role{id: 373405430589816834}, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; %{id: 373405430589816834, position: 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; %{role: %Crux.Structs.Role{id: 373405430589816834}, position: 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; {373405430589816834, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() %{id: 373405430589816834, position: 5} iex&gt; {nil, 5} ...&gt; |&gt; Crux.Structs.Role.resolve_position() nil"},{"ref":"Crux.Structs.Role.html#to_mention/1","title":"Crux.Structs.Role.to_mention/1","type":"function","doc":"Converts a Crux.Structs.Role.t/0 into its discord mention format. Example iex&gt; %Crux.Structs.Role{id: 376146940762783746} ...&gt; |&gt; Crux.Structs.Role.to_mention() &quot;&lt;@&amp;376146940762783746&gt;&quot;"},{"ref":"Crux.Structs.Role.html#t:id_resolvable/0","title":"Crux.Structs.Role.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a role id."},{"ref":"Crux.Structs.Role.html#t:position_resolvable/0","title":"Crux.Structs.Role.position_resolvable/0","type":"type","doc":"All available types that can be resolved into a role position."},{"ref":"Crux.Structs.Role.html#t:t/0","title":"Crux.Structs.Role.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Snowflake.html","title":"Crux.Structs.Snowflake","type":"module","doc":"Custom non discord api struct to help with working with Discord&#39;s snowflakes. For more information see Discord Docs."},{"ref":"Crux.Structs.Snowflake.html#construct/1","title":"Crux.Structs.Snowflake.construct/1","type":"function","doc":"Constructs a t/0 from its Crux.Structs.Snowflake.Parts.t/0 or a keyword of its fields. iex&gt; %Crux.Structs.Snowflake.Parts{increment: 0, process_id: 0, timestamp: 1472128634889, worker_id: 1} ...&gt; |&gt; Crux.Structs.Snowflake.construct() 218348062828003328 iex&gt; Crux.Structs.Snowflake.construct(increment: 1, timestamp: 1451106635493) 130175406673231873 iex&gt; Crux.Structs.Snowflake.construct(timestamp: Crux.Structs.Snowflake.discord_epoch()) 0"},{"ref":"Crux.Structs.Snowflake.html#deconstruct/1","title":"Crux.Structs.Snowflake.deconstruct/1","type":"function","doc":"Deconstructs a t/0 to its Crux.Structs.Snowflake.Parts.t/0. iex&gt; Crux.Structs.Snowflake.deconstruct(218348062828003328) %Crux.Structs.Snowflake.Parts{ increment: 0, process_id: 0, timestamp: 1472128634889, worker_id: 1 }"},{"ref":"Crux.Structs.Snowflake.html#discord_epoch/0","title":"Crux.Structs.Snowflake.discord_epoch/0","type":"function","doc":"The discord epoch, the first second of 2015 or 1420070400000. iex&gt; Crux.Structs.Snowflake.discord_epoch() 1_420_070_400_000"},{"ref":"Crux.Structs.Snowflake.html#from_integer/1","title":"Crux.Structs.Snowflake.from_integer/1","type":"function","doc":"Deconstructs a t/0 to its Crux.Structs.Snowflake.Parts.t/0."},{"ref":"Crux.Structs.Snowflake.html#is_snowflake/1","title":"Crux.Structs.Snowflake.is_snowflake/1","type":"macro","doc":"Returns true if term is a t/0; otherwise returns false.."},{"ref":"Crux.Structs.Snowflake.html#parse/1","title":"Crux.Structs.Snowflake.parse/1","type":"function","doc":"Converts a String.t/0 to a t/0 while allowing t/0 to pass through. Returns :error if the provided string is not a t/0. iex&gt; Crux.Structs.Snowflake.parse(&quot;invalid&quot;) :error iex&gt; Crux.Structs.Snowflake.parse(218348062828003328) 218348062828003328 # Fallbacks iex&gt; Crux.Structs.Snowflake.parse(&quot;218348062828003328&quot;) 218348062828003328"},{"ref":"Crux.Structs.Snowflake.html#to_integer/1","title":"Crux.Structs.Snowflake.to_integer/1","type":"function","doc":"Constructs a t/0 from its Crux.Structs.Snowflake.Parts.t/0."},{"ref":"Crux.Structs.Snowflake.html#to_snowflake/1","title":"Crux.Structs.Snowflake.to_snowflake/1","type":"function","doc":"Converts a String.t/0 to a t/0 while allowing t/0 and nil to pass through. Raises an ArgumentError if the provided string is not an integer. iex&gt; Crux.Structs.Snowflake.to_snowflake(218348062828003328) 218348062828003328 # Fallbacks iex&gt; Crux.Structs.Snowflake.to_snowflake(&quot;218348062828003328&quot;) 218348062828003328 iex&gt; Crux.Structs.Snowflake.to_snowflake(nil) nil"},{"ref":"Crux.Structs.Snowflake.html#t:resolvable/0","title":"Crux.Structs.Snowflake.resolvable/0","type":"type","doc":"All valid types that can be resolved into a t/0."},{"ref":"Crux.Structs.Snowflake.html#t:t/0","title":"Crux.Structs.Snowflake.t/0","type":"type","doc":"A discord snowflake, an unsigned 64 bit integer."},{"ref":"Crux.Structs.Snowflake.Parts.html","title":"Crux.Structs.Snowflake.Parts","type":"module","doc":"Custom non discord api struct representing a deconstructed Discord snowflake. Structure of the Parts FieldBitsNumber of BitsDescription Timestamp63 to 2242 bitsMilliseconds since Discord Epoch (1420070400000) Internal Worker ID21 to 175 bits Internal Process ID16 to 125 bits Increment11 to 012 bitsFor every ID that is generated on that process, this number is incremented For more information see Discord Docs."},{"ref":"Crux.Structs.Snowflake.Parts.html#t:t/0","title":"Crux.Structs.Snowflake.Parts.t/0","type":"type","doc":"The parts of a Crux.Structs.Snowflake.t/0."},{"ref":"Crux.Structs.User.html","title":"Crux.Structs.User","type":"module","doc":"Represents a Discord User Object"},{"ref":"Crux.Structs.User.html#create/1","title":"Crux.Structs.User.create/1","type":"function","doc":"Creates a Crux.Structs.User.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.User.html#resolve_id/1","title":"Crux.Structs.User.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.Guild.t/0. Automatically invoked by Crux.Structs.resolve_id/2. iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Member{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Message{author: %Crux.Structs.User{id: 218348062828003328}} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.Presence{user: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; %Crux.Structs.VoiceState{user_id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; 218348062828003328 ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328 iex&gt; &quot;218348062828003328&quot; ...&gt; |&gt; Crux.Structs.User.resolve_id() 218348062828003328"},{"ref":"Crux.Structs.User.html#to_mention/1","title":"Crux.Structs.User.to_mention/1","type":"function","doc":"Converts a Crux.Structs.User.t/0 into its discord mention format. iex&gt; %Crux.Structs.User{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.User.to_mention() &quot;&lt;@218348062828003328&gt;&quot;"},{"ref":"Crux.Structs.User.html#t:id_resolvable/0","title":"Crux.Structs.User.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a user id."},{"ref":"Crux.Structs.User.html#t:t/0","title":"Crux.Structs.User.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Util.html","title":"Crux.Structs.Util","type":"module","doc":"Collection of util functions."},{"ref":"Crux.Structs.Util.html#atomify/1","title":"Crux.Structs.Util.atomify/1","type":"function","doc":"Atomifies all keys in a passed list or map to avoid the mess of mixed string and atom keys the gateway sends. Examples # A map iex&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;} ...&gt; |&gt; Crux.Structs.Util.atomify() %{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: &quot;218348062828003328&quot;, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;} # A list iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.atomify() [ %{username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: &quot;218348062828003328&quot;, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, %{username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: &quot;130175406673231873&quot;, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ] # A nested map iex&gt; %{&quot;foo&quot; =&gt; &quot;bar&quot;, &quot;bar&quot; =&gt; %{&quot;baz&quot; =&gt; &quot;foo&quot;}} ...&gt; |&gt; Crux.Structs.Util.atomify() %{foo: &quot;bar&quot;, bar: %{baz: &quot;foo&quot;}} # A nested list iex&gt; [[%{&quot;foo&quot; =&gt; &quot;bar&quot;}], %{&quot;bar&quot; =&gt; &quot;foo&quot;}] ...&gt; |&gt; Crux.Structs.Util.atomify() [[%{foo: &quot;bar&quot;}], %{bar: &quot;foo&quot;}] # A struct iex&gt; %Crux.Structs.Overwrite{id: 448394877194076161, type: &quot;role&quot;, allow: 0, deny: 0} ...&gt; |&gt; Crux.Structs.Util.atomify() %{id: 448394877194076161, type: &quot;role&quot;, allow: 0, deny: 0}"},{"ref":"Crux.Structs.Util.html#id_to_int/1","title":"Crux.Structs.Util.id_to_int/1","type":"function","doc":"Converts a string, likely Discord snowflake, to not negative integer Examples # A string iex&gt; &quot;218348062828003328&quot; |&gt; Crux.Structs.Util.id_to_int() 218348062828003328 # Already a number iex&gt; 218348062828003328 |&gt; Crux.Structs.Util.id_to_int() 218348062828003328 # Fallback iex&gt; nil |&gt; Crux.Structs.Util.id_to_int() nil"},{"ref":"Crux.Structs.Util.html#map_to_id/1","title":"Crux.Structs.Util.map_to_id/1","type":"function","doc":"Returns a function converting a passed map to an id, using the specified key as key. Examples # Id is already a number iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{foo: 123}) 123 # Id is a string iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{foo: &quot;123&quot;}) 123 # No id exists iex&gt; Crux.Structs.Util.map_to_id(:foo).(%{&quot;foo&quot; =&gt; &quot;123&quot;}) nil # Example using [`Enum.map/2`](https://hexdocs.pm/elixir/Enum.html#map/2) iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Enum.map(Crux.Structs.Util.map_to_id(&quot;id&quot;)) [218348062828003328, 130175406673231873]"},{"ref":"Crux.Structs.Util.html#modulesince/1","title":"Crux.Structs.Util.modulesince/1","type":"macro","doc":""},{"ref":"Crux.Structs.Util.html#raw_data_to_map/3","title":"Crux.Structs.Util.raw_data_to_map/3","type":"function","doc":"Converts a list of raw api data to structs keyed under the passed key. Examples iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.raw_data_to_map(Crux.Structs.User) %{ 130175406673231873 =&gt; %Crux.Structs.User{ username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot; }, 218348062828003328 =&gt; %Crux.Structs.User{ username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot; } } iex&gt; [ ...&gt; %{&quot;username&quot; =&gt; &quot;space&quot;, &quot;discriminator&quot; =&gt; &quot;0001&quot;, &quot;id&quot; =&gt; &quot;218348062828003328&quot;, &quot;avatar&quot; =&gt; &quot;46a356e237350bf8b8dfde15667dfc4&quot;}, ...&gt; %{&quot;username&quot; =&gt; &quot;Drahcirius&quot;, &quot;discriminator&quot; =&gt; &quot;1336&quot;, &quot;id&quot; =&gt; &quot;130175406673231873&quot;, &quot;avatar&quot; =&gt; &quot;c896aebec82c90f590b08cfebcdc4e3b&quot;} ...&gt; ] ...&gt; |&gt; Crux.Structs.Util.raw_data_to_map(Crux.Structs.User, :username) %{ &quot;Drahcirius&quot; =&gt; %Crux.Structs.User{ username: &quot;Drahcirius&quot;, discriminator: &quot;1336&quot;, id: 130175406673231873, avatar: &quot;c896aebec82c90f590b08cfebcdc4e3b&quot; }, &quot;space&quot; =&gt; %Crux.Structs.User{ username: &quot;space&quot;, discriminator: &quot;0001&quot;, id: 218348062828003328, avatar: &quot;46a356e237350bf8b8dfde15667dfc4&quot; } }"},{"ref":"Crux.Structs.Util.html#since/1","title":"Crux.Structs.Util.since/1","type":"macro","doc":""},{"ref":"Crux.Structs.Util.html#string_to_atom/1","title":"Crux.Structs.Util.string_to_atom/1","type":"function","doc":"Converts a string to an atom. Returns an already converted atom as is instead of raising Examples # A string iex&gt; &quot;id&quot; |&gt; Crux.Structs.Util.string_to_atom() :id # Already an atom iex&gt; :id |&gt; Crux.Structs.Util.string_to_atom() :id"},{"ref":"Crux.Structs.Util.html#typesince/1","title":"Crux.Structs.Util.typesince/1","type":"macro","doc":""},{"ref":"Crux.Structs.VoiceState.html","title":"Crux.Structs.VoiceState","type":"module","doc":"Represents a Discord Voice State Object"},{"ref":"Crux.Structs.VoiceState.html#create/1","title":"Crux.Structs.VoiceState.create/1","type":"function","doc":"Creates a Crux.Structs.VoiceState.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.VoiceState.html#resolve_id/1","title":"Crux.Structs.VoiceState.resolve_id/1","type":"function","doc":"Resolves the id of a Crux.Structs.VoiceState.t/0. Automatically invoked by Crux.Structs.resolve_id/2. For examples see Crux.Structs.User.resolve_id/1."},{"ref":"Crux.Structs.VoiceState.html#t:id_resolvable/0","title":"Crux.Structs.VoiceState.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a user id."},{"ref":"Crux.Structs.VoiceState.html#t:t/0","title":"Crux.Structs.VoiceState.t/0","type":"type","doc":""},{"ref":"Crux.Structs.Webhook.html","title":"Crux.Structs.Webhook","type":"module","doc":"Represents a Discord Webhook Object Differences opposed to the Discord API Object: :user is just the user id"},{"ref":"Crux.Structs.Webhook.html#create/1","title":"Crux.Structs.Webhook.create/1","type":"function","doc":"Creates a Crux.Structs.Webhook.t/0 struct from raw data. Automatically invoked by Crux.Structs.create/2."},{"ref":"Crux.Structs.Webhook.html#to_mention/1","title":"Crux.Structs.Webhook.to_mention/1","type":"function","doc":"Converts a Crux.Structs.Webhook.t/0 into its discord mention format. Although the discord client does not autocomplete it for you, mentioning one still works. iex&gt; %Crux.Structs.Webhook{id: 218348062828003328} ...&gt; |&gt; Crux.Structs.Webhook.to_mention() &quot;&lt;@218348062828003328&gt;&quot;"},{"ref":"Crux.Structs.Webhook.html#t:id_resolvable/0","title":"Crux.Structs.Webhook.id_resolvable/0","type":"type","doc":"All available types that can be resolved into a webhook id."},{"ref":"Crux.Structs.Webhook.html#t:t/0","title":"Crux.Structs.Webhook.t/0","type":"type","doc":""}]